[
    {
        "id": "dfb95ed1ca05b9e7",
        "type": "tab",
        "label": "[Stellio] Maintenance",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e239f32639a28b7a",
        "type": "tab",
        "label": "[Stellio] Konrad Stationen",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "130060434246f931",
        "type": "tab",
        "label": "[Stellio] Zeus Roller",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "279efa75137f8875",
        "type": "tab",
        "label": "[Stellio] GBFS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "50940b605fe0d135",
        "type": "tab",
        "label": "[Stellio] Ladesäulen",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3ea68b5de28cd37e",
        "type": "tab",
        "label": "[PostgREST, raw] GBFS",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7254d490dc8b92ae",
        "type": "tab",
        "label": "[PostgREST, sdm] Konrad Stationen",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "541e4b2a25f56a51",
        "type": "tab",
        "label": "[PostgREST, sdm] Zeus Roller",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5043212b2379e71b",
        "type": "tab",
        "label": "[PostgREST, raw] Ladesäulen",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d4f0e7402fe799f8",
        "type": "tab",
        "label": "[PostgREST, sdm] Ladesäulen",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "67bf633c0fe1bc4a",
        "type": "group",
        "z": "e239f32639a28b7a",
        "name": "Read Stellio History of Single Entity",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "abc1e8247cf170df",
            "1fb2f532900d5677",
            "a80fcd6812b74f41",
            "01cbc1f69af3385e",
            "085e999f37347518",
            "c1bb3a31bda145e2",
            "3fe4a98fa5ab5716"
        ],
        "x": 714,
        "y": 19,
        "w": 812,
        "h": 142
    },
    {
        "id": "e26b08628d1dd205",
        "type": "group",
        "z": "130060434246f931",
        "name": "Read Stellio History of Single Entity",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "5a068c74ae8a54ed",
            "b863ea11adc07bb7",
            "e43a4752f681f97c",
            "64f2223ec2751de7",
            "3a4a83cc92bafd59",
            "87918d4cbd424db1",
            "ce67f8aa3a0aadb0"
        ],
        "x": 714,
        "y": 19,
        "w": 812,
        "h": 142
    },
    {
        "id": "0976576945adbcee",
        "type": "group",
        "z": "279efa75137f8875",
        "name": "Read Stellio History of Single Entity",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "1de523737cc1bac1",
            "16f135259c7d0fe0",
            "e4ef25c8647de9f5",
            "b595de17122fc679",
            "96825e5cde62bf3b",
            "fefcdc2f97175db6",
            "2ca8f9151e363a06"
        ],
        "x": 714,
        "y": 19,
        "w": 812,
        "h": 142
    },
    {
        "id": "96b858f5dc691b79",
        "type": "group",
        "z": "dfb95ed1ca05b9e7",
        "name": "Read Stellio Types",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "aaa99ebe73180671",
            "d839a3a3f6fe7229",
            "62aaa14ce07ed422",
            "f51594451ae72033"
        ],
        "x": 34,
        "y": 39,
        "w": 772,
        "h": 82
    },
    {
        "id": "9aa2cbeacb0d89aa",
        "type": "group",
        "z": "dfb95ed1ca05b9e7",
        "name": "Read Stellio Entities",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "b6befff894dd0f3c",
            "470e75cc3d0f2a37",
            "2d938292931aeb9e",
            "0e72a1d46923aa7d",
            "e5fa5ef292ab7068",
            "83ace89d80e2a34f",
            "26ee5b04de0f0523",
            "624259a54c0b1b68",
            "7401845cfcd6fc6a",
            "842d628a28205bd7",
            "6edf16ac0444535b",
            "5ddb350bb8e2a70d",
            "45ac4cabe414a289",
            "98518ec874e4f17c",
            "0b9b9222e07bc61d",
            "e59329e07df37e35",
            "e68b220b78f69ac9",
            "ad8de4971a5db7cd",
            "46ff97a8d9969fe2",
            "cf5faa6bbaccf325",
            "ecb1fa515e72cf32",
            "338cbb36825b838f",
            "82a4013d62953c3f",
            "d66c487e1331f920",
            "0b9e877aaaa45c11"
        ],
        "x": 34,
        "y": 299,
        "w": 1092,
        "h": 562
    },
    {
        "id": "efe3716d0229b80a",
        "type": "group",
        "z": "dfb95ed1ca05b9e7",
        "name": "Delete Stellio Entities",
        "style": {
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "f01f56cd171e87e2",
            "b8aa9617e5afadea",
            "f60ab717fc148df1",
            "e62d2b13053cdd14",
            "7cfee927748434e4",
            "83f2aa6b1e75f5db",
            "8dde99fbf1d37fd5"
        ],
        "x": 34,
        "y": 139,
        "w": 852,
        "h": 142
    },
    {
        "id": "81d3198b85645e10",
        "type": "group",
        "z": "50940b605fe0d135",
        "name": "Read Stellio History of Single Entity",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "f52718f897020a92",
            "09557e47e2ed1b35",
            "39bfd399e38de3fe",
            "0dd3c8151e991918",
            "32df7b0e6f61b5bf",
            "8cc62f53c016ddfa",
            "2e641ad7068c1df0"
        ],
        "x": 714,
        "y": 39,
        "w": 812,
        "h": 142
    },
    {
        "id": "18958834c5323352",
        "type": "group",
        "z": "50940b605fe0d135",
        "name": "RAW",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "bd8d2768304e37fb",
            "492ee54e54f607a7",
            "ab2f5f236acc5f46",
            "d0f4b03ae99c8351",
            "661e9b913953ba69",
            "192b12dc023bff79",
            "ef380b50cc54522a",
            "2d89db399f069a18",
            "1095181b19e43685",
            "5c9b4f93bccb15aa",
            "0d50438015d7681a",
            "77e5e0f98219cf4d",
            "a3ae30d5e2cd4afa",
            "a1c946c9a4229481",
            "64b1a1ff9f6f14af",
            "d39d45b2f3cc835e",
            "9f08d12ea3b3c88e"
        ],
        "x": 24,
        "y": 39,
        "w": 662,
        "h": 562
    },
    {
        "id": "2c212039c596ad4f",
        "type": "group",
        "z": "50940b605fe0d135",
        "name": "SDM: Transportation.EVChargingStation",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "0907d04275ebde7a",
            "a4e4d8b358e5ab48",
            "fa2f382b876ba2b9",
            "2eeff5c2b04351b4",
            "c52f32bc1de5cde5",
            "4fd2d351117d5831",
            "0f1dd9a3a8c0a9ac",
            "1ff92a421c068255",
            "878584f7de3888a0",
            "aefc57e4e237a029",
            "2e904d7692faf822",
            "9e359282cc553c91",
            "0483fbd63df27657",
            "b0eaedb9ee95fd31",
            "07920faaf573d8bd",
            "17346f7fabb649dc",
            "cc55337bcbc6863d",
            "58609bb0f309d986"
        ],
        "x": 24,
        "y": 639,
        "w": 662,
        "h": 622
    },
    {
        "id": "1edfe0b06c1b04db",
        "type": "group",
        "z": "50940b605fe0d135",
        "name": "Read Stellio History of Single Entity",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "3081c1c5159b8ff1",
            "a7419744e0843ad5",
            "93ef6e8bd3e995dc",
            "82747105a7c9d6e5",
            "0b7bc51b6926fbbd",
            "6b735c1d6fc275a0",
            "055be2d5c94e15c1"
        ],
        "x": 714,
        "y": 639,
        "w": 812,
        "h": 142
    },
    {
        "id": "f31b7352a85a08b3",
        "type": "group",
        "z": "3ea68b5de28cd37e",
        "name": "Database Schema",
        "style": {
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "b04218a35be66552",
            "85341e6bc5218f39",
            "29d336ad9ebed4aa",
            "87e1c238ba747f8a",
            "1fbe6c93d90c0b79",
            "da2c1bbb8bc09422",
            "e088d961c00c0c64",
            "0c4ffdb827fb74cf",
            "58418485d82d35f8",
            "c4a38e65e6ac48b5"
        ],
        "x": 28,
        "y": 1073,
        "w": 1298,
        "h": 248
    },
    {
        "id": "8384c06ee6c789f5",
        "type": "group",
        "z": "3ea68b5de28cd37e",
        "name": "Update Job",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "b8669da2f14aacf2",
            "35988d545ebb4bab",
            "44e9de72054ecb19",
            "674e01e669cc47b5",
            "6d159c2b70f936e3",
            "41645733b4592f63"
        ],
        "x": 24,
        "y": 119,
        "w": 868,
        "h": 928
    },
    {
        "id": "30013ccc1f412d72",
        "type": "group",
        "z": "5043212b2379e71b",
        "name": "Update Job",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "54f3230f11be7ae4",
            "626c24a59ef1b75a",
            "76b6d695d28b4d5c",
            "04873f6a5ca52ad7",
            "44131bee2c1ee3e7",
            "9021453973b1e990"
        ],
        "x": 44,
        "y": 119,
        "w": 628,
        "h": 728
    },
    {
        "id": "f0ecc985a2fab29a",
        "type": "group",
        "z": "5043212b2379e71b",
        "name": "Database Schema",
        "style": {
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "a091c527f64995f9",
            "395e63152d11bad7",
            "65808d41ca65e685",
            "3fb47b30590483e7",
            "c0c6f03ffd9df0c0",
            "a6d754d0b4cb8a69",
            "404d85508fcd936e",
            "61ae8ad7328d8d1b",
            "abf8c58f802b3876",
            "26bbca78f4f0238a"
        ],
        "x": 48,
        "y": 893,
        "w": 1298,
        "h": 248
    },
    {
        "id": "6fdf9b96deeaa488",
        "type": "group",
        "z": "d4f0e7402fe799f8",
        "name": "Database Schema",
        "style": {
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "89c222043f2beeb7",
            "f9fe04d82f31e645",
            "c5b2abce3d597894",
            "b159a68fe0144d09",
            "899a86ccce65c327",
            "af6dd385ea8a5a80",
            "a30ba77131584ae7",
            "6544352628596478",
            "04b0c086457585ae"
        ],
        "x": 28,
        "y": 873,
        "w": 1318,
        "h": 248
    },
    {
        "id": "2677aefc9d51833a",
        "type": "group",
        "z": "d4f0e7402fe799f8",
        "name": "Update Job",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "7a1229b9f11f8d4b",
            "5b0be50bf1cf0fa0",
            "77340e0899cd190b",
            "d25d17ad11926b49",
            "76514695a5980861",
            "d8327e5b86c46b16"
        ],
        "x": 28,
        "y": 119,
        "w": 624,
        "h": 728
    },
    {
        "id": "dc11a833da7816df",
        "type": "group",
        "z": "7254d490dc8b92ae",
        "name": "Database Schema",
        "style": {
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "3ed39dfea1bcec72",
            "050c502f17aeaadc",
            "17bf151937c6a8f3",
            "f22ca1b0081c2126",
            "e050d224a69c5f67",
            "2a4cd8866b4b9d18",
            "b70fda7c2d04bd57",
            "1011bc6efbacb0c7",
            "1630bf7f0a2f22d0",
            "1d3623bc18a517d0"
        ],
        "x": 28,
        "y": 873,
        "w": 1298,
        "h": 248
    },
    {
        "id": "ad0f8627a27fd460",
        "type": "group",
        "z": "7254d490dc8b92ae",
        "name": "Update Job",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "83fd00e225c7e456",
            "9117a1b92c1cb693",
            "77344e8dc255c475",
            "09ad74c825fd5404",
            "b27cc92944ec3fd7",
            "12073ae4cfe47bf3",
            "8f3676de990a3a3e",
            "9ac01a61a7d50897",
            "52086b90859658de",
            "ca90b60a31372939",
            "cf87d65c1c8daf4d",
            "d9195bb7bab1f2a7",
            "978f49f12f8276c8"
        ],
        "x": 24,
        "y": 119,
        "w": 702,
        "h": 708
    },
    {
        "id": "efb71f06b1171c52",
        "type": "group",
        "z": "541e4b2a25f56a51",
        "name": "Database Schema",
        "style": {
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "32215c5b0fc9d5d5",
            "4f7cf3b9655f1ec5",
            "73150a2014f0be11",
            "a4346a9f423f124f",
            "5006b0df317b7aef",
            "5295eb8826702f2d",
            "3d549e073bd598bb",
            "e9c3753ec70a3abe",
            "c6ddd5234eff8889",
            "87e46a1170e6d16c"
        ],
        "x": 48,
        "y": 673,
        "w": 1298,
        "h": 248
    },
    {
        "id": "c7a0987960efee3f",
        "type": "group",
        "z": "541e4b2a25f56a51",
        "name": "Update Job",
        "style": {
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "5ea21ab10b651e0d",
            "92f457e2c0b75d30",
            "874ee62094bc9501",
            "10a722b62f7439b6",
            "dc223cf83b756652",
            "bad3a5ee14b9abed",
            "b889d8ea027ab160",
            "7e108667b7b35e59"
        ],
        "x": 44,
        "y": 119,
        "w": 648,
        "h": 528
    },
    {
        "id": "da2c1bbb8bc09422",
        "type": "group",
        "z": "3ea68b5de28cd37e",
        "g": "f31b7352a85a08b3",
        "name": "",
        "style": {
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "e0b623ba937fb12c",
            "0d05b3f021081b93",
            "e17723de69b8687a"
        ],
        "x": 54,
        "y": 1099,
        "w": 572,
        "h": 142
    },
    {
        "id": "674e01e669cc47b5",
        "type": "group",
        "z": "3ea68b5de28cd37e",
        "g": "8384c06ee6c789f5",
        "name": "find GBFS feeds for each topic",
        "style": {
            "label": true
        },
        "nodes": [
            "725e98ee40419995",
            "586cd0e345ed2228",
            "eb0dedc7940396dc",
            "2474dad97a381703",
            "d1b850504843013b",
            "3cd3aeebb6972223",
            "1896a347abfeaf77",
            "8e317953c6fb8245",
            "f0d28104061b252b"
        ],
        "x": 74,
        "y": 219,
        "w": 792,
        "h": 202
    },
    {
        "id": "6d159c2b70f936e3",
        "type": "group",
        "z": "3ea68b5de28cd37e",
        "g": "8384c06ee6c789f5",
        "name": "download each feed and create database row",
        "style": {
            "label": true
        },
        "nodes": [
            "8d0159e619f36512",
            "fec46b05d49585f9",
            "2334537c7b5cf2e0",
            "c67906894c4bbfb8",
            "686bdfbb95377093",
            "aea905b538edc5ab",
            "45f3571c533a5ee1",
            "2034918cac6438f9"
        ],
        "x": 74,
        "y": 459,
        "w": 592,
        "h": 322
    },
    {
        "id": "41645733b4592f63",
        "type": "group",
        "z": "3ea68b5de28cd37e",
        "g": "8384c06ee6c789f5",
        "name": "Submit rows to database ",
        "style": {
            "label": true
        },
        "nodes": [
            "00fe3a687c00620c",
            "70847b2baff0c73d",
            "93e70b2a358e345e",
            "e877cd13dd0095ee",
            "52635ab420ac9b57"
        ],
        "x": 74,
        "y": 819,
        "w": 532,
        "h": 202
    },
    {
        "id": "a6d754d0b4cb8a69",
        "type": "group",
        "z": "5043212b2379e71b",
        "g": "f0ecc985a2fab29a",
        "name": "",
        "style": {
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "97e0d039c27ccc7c",
            "35ad38dc7b697312",
            "f449dc07a6445fd1"
        ],
        "x": 74,
        "y": 919,
        "w": 572,
        "h": 142
    },
    {
        "id": "9021453973b1e990",
        "type": "group",
        "z": "5043212b2379e71b",
        "g": "30013ccc1f412d72",
        "name": "Submit to database ",
        "style": {
            "label": true
        },
        "nodes": [
            "dc1da52314af2f43",
            "fa7bb89cd6513dd8",
            "6f8987d7bb88570e",
            "74cbe6ae8e9d28ab",
            "8b6dc768a5a2584a"
        ],
        "x": 74,
        "y": 619,
        "w": 532,
        "h": 202
    },
    {
        "id": "76b6d695d28b4d5c",
        "type": "group",
        "z": "5043212b2379e71b",
        "g": "30013ccc1f412d72",
        "name": "paginated get",
        "style": {
            "label": true
        },
        "nodes": [
            "71152ddb855af6c1",
            "413de703924682f7",
            "4c7cf439031aa802",
            "6038b168d6d426c0",
            "d01dcdec5d23cc0d",
            "c2239362dde3a5d6",
            "50730f3b1fadc90e",
            "67cb23dbb64c6859",
            "31a49f07e5edc38f",
            "d6705b58c8208b70"
        ],
        "x": 74,
        "y": 199,
        "w": 572,
        "h": 342
    },
    {
        "id": "6544352628596478",
        "type": "group",
        "z": "d4f0e7402fe799f8",
        "g": "6fdf9b96deeaa488",
        "name": "",
        "style": {
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "5530dcf69c72f409",
            "35a60496d4fa38a8",
            "18775d72311df69e"
        ],
        "x": 54,
        "y": 899,
        "w": 572,
        "h": 142
    },
    {
        "id": "77340e0899cd190b",
        "type": "group",
        "z": "d4f0e7402fe799f8",
        "g": "2677aefc9d51833a",
        "name": "paginated get",
        "style": {
            "label": true
        },
        "nodes": [
            "8479727918ef6376",
            "9a75f0cc0e2a8e7e",
            "fb394da75935ee24",
            "64c4f1734b9c8a98",
            "d7852f33a08e8887",
            "a75a5e6cb9a2ec88",
            "e5dfd2ec225221c1",
            "fe0b54a98c6bf6f2",
            "c5171d51c1cf97ec",
            "d21418b37884a05b"
        ],
        "x": 54,
        "y": 199,
        "w": 572,
        "h": 342
    },
    {
        "id": "d8327e5b86c46b16",
        "type": "group",
        "z": "d4f0e7402fe799f8",
        "g": "2677aefc9d51833a",
        "name": "Submit to database ",
        "style": {
            "label": true
        },
        "nodes": [
            "e29eb25a802a9814",
            "8f0d6a72787a408f",
            "2e8fa978dd2ec7e4",
            "25c57deef636d97d",
            "be98aa5e1e4e3b03"
        ],
        "x": 54,
        "y": 619,
        "w": 532,
        "h": 202
    },
    {
        "id": "978f49f12f8276c8",
        "type": "group",
        "z": "7254d490dc8b92ae",
        "g": "ad0f8627a27fd460",
        "name": "Submit to database ",
        "style": {
            "label": true
        },
        "nodes": [
            "9b15d451f1b0f66a",
            "5ac82a56106c156e",
            "4dfe019a6018ed01",
            "960256e4780d1904",
            "f17cf164ceb9544c"
        ],
        "x": 114,
        "y": 599,
        "w": 532,
        "h": 202
    },
    {
        "id": "2a4cd8866b4b9d18",
        "type": "group",
        "z": "7254d490dc8b92ae",
        "g": "dc11a833da7816df",
        "name": "",
        "style": {
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "b9553a1cdb5e15c9",
            "58771ea04a2073e4",
            "013fc7de7925c10e"
        ],
        "x": 54,
        "y": 899,
        "w": 572,
        "h": 142
    },
    {
        "id": "5295eb8826702f2d",
        "type": "group",
        "z": "541e4b2a25f56a51",
        "g": "efb71f06b1171c52",
        "name": "",
        "style": {
            "fill": "#ffbfbf",
            "label": true
        },
        "nodes": [
            "7bcfd74f356855cd",
            "98042903a531ade0",
            "1ef0a435792ba31d"
        ],
        "x": 74,
        "y": 699,
        "w": 572,
        "h": 142
    },
    {
        "id": "7e108667b7b35e59",
        "type": "group",
        "z": "541e4b2a25f56a51",
        "g": "c7a0987960efee3f",
        "name": "Submit to database ",
        "style": {
            "label": true
        },
        "nodes": [
            "27814809a4e3080e",
            "68c3be2d139c8d13",
            "e59b1fc3297be6d0",
            "46917c46b25aa384",
            "1070e397dc8bbe73"
        ],
        "x": 134,
        "y": 419,
        "w": 532,
        "h": 202
    },
    {
        "id": "8dde99fbf1d37fd5",
        "type": "comment",
        "z": "dfb95ed1ca05b9e7",
        "g": "efe3716d0229b80a",
        "name": "You're on a prod sevice/tenant!",
        "info": "",
        "x": 730,
        "y": 240,
        "wires": []
    },
    {
        "id": "aaa99ebe73180671",
        "type": "inject",
        "z": "dfb95ed1ca05b9e7",
        "g": "96b858f5dc691b79",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "62aaa14ce07ed422"
            ]
        ]
    },
    {
        "id": "d839a3a3f6fe7229",
        "type": "http request",
        "z": "dfb95ed1ca05b9e7",
        "g": "96b858f5dc691b79",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 530,
        "y": 80,
        "wires": [
            [
                "f51594451ae72033"
            ]
        ]
    },
    {
        "id": "62aaa14ce07ed422",
        "type": "function",
        "z": "dfb95ed1ca05b9e7",
        "g": "96b858f5dc691b79",
        "name": "prepare request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/types`;\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = 'application/ld+json';\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 80,
        "wires": [
            [
                "d839a3a3f6fe7229"
            ]
        ]
    },
    {
        "id": "f51594451ae72033",
        "type": "debug",
        "z": "dfb95ed1ca05b9e7",
        "g": "96b858f5dc691b79",
        "name": "Stellio types",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload.typeList",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload.typeList)",
        "statusType": "jsonata",
        "x": 690,
        "y": 80,
        "wires": []
    },
    {
        "id": "b6befff894dd0f3c",
        "type": "http request",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 290,
        "y": 700,
        "wires": [
            [
                "cf5faa6bbaccf325",
                "2d938292931aeb9e",
                "7cfee927748434e4"
            ]
        ]
    },
    {
        "id": "470e75cc3d0f2a37",
        "type": "function",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers[\"Content-Type\"] = 'application/ld+json';\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 640,
        "wires": [
            [
                "b6befff894dd0f3c"
            ]
        ]
    },
    {
        "id": "2d938292931aeb9e",
        "type": "debug",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "Stellio entities",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 480,
        "y": 700,
        "wires": []
    },
    {
        "id": "0e72a1d46923aa7d",
        "type": "http request",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "HTTP",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 450,
        "y": 420,
        "wires": [
            [
                "624259a54c0b1b68",
                "e68b220b78f69ac9"
            ]
        ]
    },
    {
        "id": "e5fa5ef292ab7068",
        "type": "function",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "get types",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/types`;\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = 'application/ld+json';\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 420,
        "wires": [
            [
                "0e72a1d46923aa7d"
            ]
        ]
    },
    {
        "id": "83ace89d80e2a34f",
        "type": "debug",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "entity types",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 1010,
        "y": 500,
        "wires": []
    },
    {
        "id": "26ee5b04de0f0523",
        "type": "inject",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "",
        "props": [
            {
                "p": "entityType",
                "v": "EVChargingStation",
                "vt": "str"
            },
            {
                "p": "entityType",
                "v": "all",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 340,
        "wires": [
            [
                "98518ec874e4f17c",
                "0b9b9222e07bc61d"
            ]
        ]
    },
    {
        "id": "624259a54c0b1b68",
        "type": "change",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "read result",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload.typeList",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 400,
        "wires": [
            [
                "ad8de4971a5db7cd"
            ]
        ]
    },
    {
        "id": "7401845cfcd6fc6a",
        "type": "split",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 150,
        "y": 580,
        "wires": [
            [
                "842d628a28205bd7"
            ]
        ]
    },
    {
        "id": "842d628a28205bd7",
        "type": "change",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "entityType",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 580,
        "wires": [
            [
                "d66c487e1331f920"
            ]
        ]
    },
    {
        "id": "6edf16ac0444535b",
        "type": "join",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 670,
        "y": 760,
        "wires": [
            [
                "82a4013d62953c3f"
            ]
        ]
    },
    {
        "id": "5ddb350bb8e2a70d",
        "type": "debug",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "Stellio entities",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 700,
        "y": 820,
        "wires": []
    },
    {
        "id": "45ac4cabe414a289",
        "type": "function",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "flatten",
        "func": "msg.payload = msg.payload.flat()\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 820,
        "wires": [
            [
                "5ddb350bb8e2a70d"
            ]
        ]
    },
    {
        "id": "98518ec874e4f17c",
        "type": "debug",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "entityType",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "msg.entityType",
        "statusType": "msg",
        "x": 330,
        "y": 340,
        "wires": []
    },
    {
        "id": "0b9b9222e07bc61d",
        "type": "switch",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "",
        "property": "entityType",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "all",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 440,
        "wires": [
            [
                "e5fa5ef292ab7068"
            ],
            [
                "e59329e07df37e35"
            ]
        ]
    },
    {
        "id": "e59329e07df37e35",
        "type": "change",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[ msg.entityType ]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 470,
        "y": 500,
        "wires": [
            [
                "ad8de4971a5db7cd"
            ]
        ]
    },
    {
        "id": "e68b220b78f69ac9",
        "type": "debug",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "Stellio types",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 630,
        "y": 440,
        "wires": []
    },
    {
        "id": "ad8de4971a5db7cd",
        "type": "change",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "no-op",
        "rules": [],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 500,
        "wires": [
            [
                "83ace89d80e2a34f",
                "7401845cfcd6fc6a"
            ]
        ]
    },
    {
        "id": "46ff97a8d9969fe2",
        "type": "function",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "configure first page",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/entities?type=${msg.entityType}`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 640,
        "wires": [
            [
                "470e75cc3d0f2a37"
            ]
        ]
    },
    {
        "id": "cf5faa6bbaccf325",
        "type": "function",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "pagination",
        "func": "// Function: if there is a next page; set url accordingly and return, otherwise do nothing.\n// Explanation:\n// If there is a next page; it's defined in the link response header.\n// https://www.w3.org/wiki/LinkHeader\n// There may be (and are) multiple links in this header.\n// See NGSI-LD Spec Section 6.3.10 Pagination behaviour:\n// https://www.etsi.org/deliver/etsi_gs/CIM/001_099/009/01.06.01_60/gs_CIM009v010601p.pdf\n// Author: pkel\n\nvar outA = null;\n\nconst m = msg.headers.link.match(/<([^>]*)>;\\s*rel=[\"']?next[\"']?/)\nif (m) {\n    outA = {\n        url: env.get('STELLIO_API_URL') + m[1],\n        outer_parts: msg.outer_parts,\n    };\n} else {\n    msg.complete = true;\n}\n\nreturn [outA, msg]",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 760,
        "wires": [
            [
                "ecb1fa515e72cf32",
                "470e75cc3d0f2a37"
            ],
            [
                "6edf16ac0444535b"
            ]
        ]
    },
    {
        "id": "ecb1fa515e72cf32",
        "type": "debug",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "next page",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "url",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 700,
        "wires": []
    },
    {
        "id": "338cbb36825b838f",
        "type": "join",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 390,
        "y": 820,
        "wires": [
            [
                "45ac4cabe414a289"
            ]
        ]
    },
    {
        "id": "82a4013d62953c3f",
        "type": "function",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "flatten",
        "func": "msg.payload = msg.payload.flat()\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 760,
        "wires": [
            [
                "0b9e877aaaa45c11"
            ]
        ]
    },
    {
        "id": "d66c487e1331f920",
        "type": "change",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "prep nested split/join",
        "rules": [
            {
                "t": "move",
                "p": "parts",
                "pt": "msg",
                "to": "outer_parts",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 580,
        "wires": [
            [
                "46ff97a8d9969fe2"
            ]
        ]
    },
    {
        "id": "0b9e877aaaa45c11",
        "type": "change",
        "z": "dfb95ed1ca05b9e7",
        "g": "9aa2cbeacb0d89aa",
        "name": "finalize nested split/join",
        "rules": [
            {
                "t": "move",
                "p": "outer_parts",
                "pt": "msg",
                "to": "parts",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "entityType",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 820,
        "wires": [
            [
                "338cbb36825b838f"
            ]
        ]
    },
    {
        "id": "f01f56cd171e87e2",
        "type": "http request",
        "z": "dfb95ed1ca05b9e7",
        "g": "efe3716d0229b80a",
        "name": "HTTP",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 330,
        "y": 240,
        "wires": [
            [
                "f60ab717fc148df1"
            ]
        ]
    },
    {
        "id": "b8aa9617e5afadea",
        "type": "function",
        "z": "dfb95ed1ca05b9e7",
        "g": "efe3716d0229b80a",
        "name": "prepare request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\n\nmsg.method = 'POST';\n\nmsg.url = `${stellio}/entityOperations/delete`;\n\nmsg.headers = {};\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 240,
        "wires": [
            [
                "f01f56cd171e87e2"
            ]
        ]
    },
    {
        "id": "f60ab717fc148df1",
        "type": "debug",
        "z": "dfb95ed1ca05b9e7",
        "g": "efe3716d0229b80a",
        "name": "Stellio delete",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 490,
        "y": 240,
        "wires": []
    },
    {
        "id": "e62d2b13053cdd14",
        "type": "comment",
        "z": "dfb95ed1ca05b9e7",
        "g": "efe3716d0229b80a",
        "name": "Connect to output of Read Entities flow below",
        "info": "",
        "x": 230,
        "y": 180,
        "wires": []
    },
    {
        "id": "7cfee927748434e4",
        "type": "function",
        "z": "dfb95ed1ca05b9e7",
        "g": "efe3716d0229b80a",
        "name": "extract ids from entity list",
        "func": "msg.payload = msg.payload.map(x => x.id);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 180,
        "wires": [
            [
                "83f2aa6b1e75f5db",
                "b8aa9617e5afadea"
            ]
        ]
    },
    {
        "id": "83f2aa6b1e75f5db",
        "type": "debug",
        "z": "dfb95ed1ca05b9e7",
        "g": "efe3716d0229b80a",
        "name": "entity ids",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 780,
        "y": 180,
        "wires": []
    },
    {
        "id": "b6ebc34954a5355d",
        "type": "inject",
        "z": "e239f32639a28b7a",
        "name": "",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "*/15 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "3f267949c9e94932"
            ]
        ]
    },
    {
        "id": "bde7a5a003f78d2c",
        "type": "http request",
        "z": "e239f32639a28b7a",
        "name": "GET station_information",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.mobidata-bw.de/sharing/gbfs/v2/nextbike_kk/station_information",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 250,
        "y": 240,
        "wires": [
            [
                "20c2573cb7edda06",
                "d69f2824266e89d9"
            ]
        ]
    },
    {
        "id": "20c2573cb7edda06",
        "type": "debug",
        "z": "e239f32639a28b7a",
        "name": "station_information",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 550,
        "y": 240,
        "wires": []
    },
    {
        "id": "07a06b1b3c15068e",
        "type": "function",
        "z": "e239f32639a28b7a",
        "name": "build SDM JSON-LD",
        "func": "let observedAt = new Date(msg.timestamp).toISOString()\n\nlet observations = []\n\nfunction property(value) {\n    return {\n        type: \"Property\",\n        value,\n        observedAt,\n    }\n}\n\nfunction point({lon, lat}) {\n    return {\n        type: \"GeoProperty\",\n        value: {\n            type: \"Point\",\n            coordinates: [lon, lat],\n        },\n        observedAt,\n    }\n}\n\nfor (const x of (msg.payload.data.stations)) {\n    const oDT = new Date(x.last_reported * 1000).toISOString();\n\n    observations.push({\n        id : `urn:sdm:BikeHireDockingStation:${x.station_id}`,\n        type: 'BikeHireDockingStation',\n        alternateName: property(x.short_name),\n        availableBikeNumber: property(x.num_bikes_available),\n        location: point({lat: x.lat, lon: x.lon}),\n        freeSlotNumber: property(x.num_docks_available),\n        name: property(x.name),\n        observationDateTime: property(oDT),\n        stationCode: property(x.station_id),\n        '@context': [\n            // \"https://context.udp-kn.de/main-context.jsonld\",\n            // 'https://raw.githubusercontent.com/smart-data-models/dataModel.Transportation/2c96c186cefb2e37eccd23313f07095a86e079dd/context.jsonld',\n            // \"https://raw.githubusercontent.com/smart-data-models/dataModel.Transportation/master/context.jsonld\"\n        ],\n    })\n}\n\nreturn {\n    payload : observations,\n    timestamp: msg.timestamp,\n    }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 500,
        "wires": [
            [
                "fd6432b96df1a39d",
                "94e27317ccdf68d1",
                "8168eb230e962337"
            ]
        ]
    },
    {
        "id": "fd6432b96df1a39d",
        "type": "debug",
        "z": "e239f32639a28b7a",
        "name": "first SDM JSON-LD",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 480,
        "wires": []
    },
    {
        "id": "8168eb230e962337",
        "type": "function",
        "z": "e239f32639a28b7a",
        "name": "prepare Stellio request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/entityOperations/upsert?options=update`;\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = 'application/ld+json';\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 620,
        "wires": [
            [
                "52a57baabe2f0d95"
            ]
        ]
    },
    {
        "id": "0366dccfbd6de154",
        "type": "debug",
        "z": "e239f32639a28b7a",
        "name": "Stellio response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 600,
        "y": 620,
        "wires": []
    },
    {
        "id": "94e27317ccdf68d1",
        "type": "debug",
        "z": "e239f32639a28b7a",
        "name": "# observations",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 540,
        "y": 540,
        "wires": []
    },
    {
        "id": "52a57baabe2f0d95",
        "type": "http request",
        "z": "e239f32639a28b7a",
        "name": "POST",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 430,
        "y": 620,
        "wires": [
            [
                "0366dccfbd6de154",
                "a95d1084f9e7d494"
            ]
        ]
    },
    {
        "id": "a14e16b3da66db16",
        "type": "http request",
        "z": "e239f32639a28b7a",
        "name": "GET station_status",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.mobidata-bw.de/sharing/gbfs/v2/nextbike_kk/station_status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 230,
        "y": 360,
        "wires": [
            [
                "2e0df4678893b499",
                "693886aa8d97ef98"
            ]
        ]
    },
    {
        "id": "2e0df4678893b499",
        "type": "debug",
        "z": "e239f32639a28b7a",
        "name": "station_status",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 540,
        "y": 360,
        "wires": []
    },
    {
        "id": "d69f2824266e89d9",
        "type": "change",
        "z": "e239f32639a28b7a",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "info",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 300,
        "wires": [
            [
                "a14e16b3da66db16"
            ]
        ]
    },
    {
        "id": "693886aa8d97ef98",
        "type": "function",
        "z": "e239f32639a28b7a",
        "name": "merge info into status",
        "func": "// prepare lookup table for station information\nvar info_table = {}\nfor (const x of (msg.info.data.stations)) {\n    info_table[x.station_id] = x;\n}\n\n// merge station information into payload / status status\nfor (const x of (msg.payload.data.stations)) {\n    Object.assign(x, info_table[x.station_id]);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 420,
        "wires": [
            [
                "3a9ddc83c24e2275",
                "07a06b1b3c15068e"
            ]
        ]
    },
    {
        "id": "3a9ddc83c24e2275",
        "type": "debug",
        "z": "e239f32639a28b7a",
        "name": "augmented station_status",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 570,
        "y": 420,
        "wires": []
    },
    {
        "id": "3f267949c9e94932",
        "type": "debug",
        "z": "e239f32639a28b7a",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "a95d1084f9e7d494",
        "type": "debug",
        "z": "e239f32639a28b7a",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 590,
        "y": 700,
        "wires": []
    },
    {
        "id": "6fb43240c4e89b86",
        "type": "comment",
        "z": "e239f32639a28b7a",
        "name": "Smart Data Model: Transportation.BikeHireDockingStation",
        "info": "",
        "x": 250,
        "y": 80,
        "wires": []
    },
    {
        "id": "6ebe2d7ccbf35d25",
        "type": "comment",
        "z": "e239f32639a28b7a",
        "name": "Konrad Leihrad Stationen aus Mobidata GBFS",
        "info": "",
        "x": 210,
        "y": 40,
        "wires": []
    },
    {
        "id": "abc1e8247cf170df",
        "type": "inject",
        "z": "e239f32639a28b7a",
        "g": "67bf633c0fe1bc4a",
        "name": "set id",
        "props": [
            {
                "p": "id",
                "v": "urn:sdm:BikeHireDockingStation:NBO:Station:379036779",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 810,
        "y": 60,
        "wires": [
            [
                "a80fcd6812b74f41",
                "c1bb3a31bda145e2"
            ]
        ]
    },
    {
        "id": "1fb2f532900d5677",
        "type": "http request",
        "z": "e239f32639a28b7a",
        "g": "67bf633c0fe1bc4a",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1170,
        "y": 60,
        "wires": [
            [
                "01cbc1f69af3385e"
            ]
        ]
    },
    {
        "id": "a80fcd6812b74f41",
        "type": "function",
        "z": "e239f32639a28b7a",
        "g": "67bf633c0fe1bc4a",
        "name": "prepare request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/entities/${msg.id}`;\n\nmsg.headers = {};\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 60,
        "wires": [
            [
                "1fb2f532900d5677"
            ]
        ]
    },
    {
        "id": "01cbc1f69af3385e",
        "type": "debug",
        "z": "e239f32639a28b7a",
        "g": "67bf633c0fe1bc4a",
        "name": "Stellio entity",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1370,
        "y": 60,
        "wires": []
    },
    {
        "id": "085e999f37347518",
        "type": "http request",
        "z": "e239f32639a28b7a",
        "g": "67bf633c0fe1bc4a",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1170,
        "y": 120,
        "wires": [
            [
                "3fe4a98fa5ab5716"
            ]
        ]
    },
    {
        "id": "c1bb3a31bda145e2",
        "type": "function",
        "z": "e239f32639a28b7a",
        "g": "67bf633c0fe1bc4a",
        "name": "prepare request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/temporal/entities/${msg.id}`;\n\nmsg.headers = {};\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 120,
        "wires": [
            [
                "085e999f37347518"
            ]
        ]
    },
    {
        "id": "3fe4a98fa5ab5716",
        "type": "debug",
        "z": "e239f32639a28b7a",
        "g": "67bf633c0fe1bc4a",
        "name": "Stellio entity history",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1390,
        "y": 120,
        "wires": []
    },
    {
        "id": "8493b27b820a4d1f",
        "type": "inject",
        "z": "130060434246f931",
        "name": "",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "*/15 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "377c6fee1f865163"
            ]
        ]
    },
    {
        "id": "dd37b8991aa7f0c3",
        "type": "http request",
        "z": "130060434246f931",
        "name": "GET free_bike_status",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.mobidata-bw.de/sharing/gbfs/v2/zeus_konstanz/free_bike_status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 240,
        "y": 240,
        "wires": [
            [
                "db3f8885904eedd7",
                "2aa539e139d858f9"
            ]
        ]
    },
    {
        "id": "db3f8885904eedd7",
        "type": "debug",
        "z": "130060434246f931",
        "name": "free_bike_status",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 540,
        "y": 240,
        "wires": []
    },
    {
        "id": "2aa539e139d858f9",
        "type": "function",
        "z": "130060434246f931",
        "name": "build SDM JSON-LD",
        "func": "let observedAt = new Date(msg.timestamp).toISOString()\n\nlet observations = []\n\nfunction property(value) {\n    return {\n        type: \"Property\",\n        value,\n        observedAt,\n    }\n}\n\nfunction point({lon, lat}) {\n    return {\n        type: \"GeoProperty\",\n        value: {\n            type: \"Point\",\n            coordinates: [lon, lat],\n        },\n        observedAt,\n    }\n}\n\nfor (const x of (msg.payload.data.bikes)) {\n    const oDT = new Date(x.last_reported * 1000).toISOString();\n    \n    var status = \"free\";\n    if (x.is_reserved) {\n        status += \", reserved\";\n    }\n    if (x.is_disabled) {\n        status += \", disabled\";\n    }\n\n    observations.push({\n        id : `urn:sdm:Vehicle:${x.bike_id}`,\n        type: 'Vehicle',\n        fleetVehicleId: property(x.bike_id),\n        vehicleType: property('scooter'),\n        location: point({ lat: x.lat, lon: x.lon }),\n        observationDateTime: property(oDT),\n        serviceStatus: property(status),\n        battery: property(x.current_range_meters), // SDM spec requests percentage!\n        '@context': [\n            // 'https://raw.githubusercontent.com/smart-data-models/dataModel.Transportation/2c96c186cefb2e37eccd23313f07095a86e079dd/context.jsonld'\n        ],\n    })\n}\n\nreturn {\n    payload : observations,\n    timestamp: msg.timestamp,\n    }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 320,
        "wires": [
            [
                "6768d6bc5fbd4980",
                "90c57bd708ee7dd1",
                "99113f2bb8223169"
            ]
        ]
    },
    {
        "id": "6768d6bc5fbd4980",
        "type": "debug",
        "z": "130060434246f931",
        "name": "first SDM JSON-LD",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 300,
        "wires": []
    },
    {
        "id": "99113f2bb8223169",
        "type": "function",
        "z": "130060434246f931",
        "name": "prepare Stellio request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/entityOperations/upsert?options=update`;\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = 'application/ld+json';\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 440,
        "wires": [
            [
                "6d60509c0eb54ef7",
                "45dc14e30ee7a396",
                "aa8161434bbef525"
            ]
        ]
    },
    {
        "id": "7384dfaaa9436db7",
        "type": "debug",
        "z": "130060434246f931",
        "name": "Stellio response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 360,
        "y": 540,
        "wires": []
    },
    {
        "id": "90c57bd708ee7dd1",
        "type": "debug",
        "z": "130060434246f931",
        "name": "# observations",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 540,
        "y": 360,
        "wires": []
    },
    {
        "id": "aa8161434bbef525",
        "type": "http request",
        "z": "130060434246f931",
        "name": "POST",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 190,
        "y": 540,
        "wires": [
            [
                "7384dfaaa9436db7",
                "ee9b84053983e21c"
            ]
        ]
    },
    {
        "id": "377c6fee1f865163",
        "type": "debug",
        "z": "130060434246f931",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "ee9b84053983e21c",
        "type": "debug",
        "z": "130060434246f931",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 350,
        "y": 620,
        "wires": []
    },
    {
        "id": "6d60509c0eb54ef7",
        "type": "debug",
        "z": "130060434246f931",
        "name": "Stellio Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 420,
        "wires": []
    },
    {
        "id": "45dc14e30ee7a396",
        "type": "function",
        "z": "130060434246f931",
        "name": "uniq id",
        "func": "const x = new Set(msg.payload.map((x) => (x.id)))\nmsg.payload = x.size\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 460,
        "wires": [
            [
                "387b603927b1db84"
            ]
        ]
    },
    {
        "id": "387b603927b1db84",
        "type": "debug",
        "z": "130060434246f931",
        "name": "# ids",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & payload",
        "statusType": "jsonata",
        "x": 590,
        "y": 460,
        "wires": []
    },
    {
        "id": "d5d28841d18b7492",
        "type": "comment",
        "z": "130060434246f931",
        "name": "Smart Data Model: Transportation.Vehicle",
        "info": "",
        "x": 200,
        "y": 80,
        "wires": []
    },
    {
        "id": "6aab51ef9a4c4c65",
        "type": "comment",
        "z": "130060434246f931",
        "name": "Zeus Leihroller Fahrzeuge aus Mobidata GBFS",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "5a068c74ae8a54ed",
        "type": "inject",
        "z": "130060434246f931",
        "g": "e26b08628d1dd205",
        "name": "set id",
        "props": [
            {
                "p": "id",
                "v": "urn:sdm:Vehicle:ZEU:Vehicle:c912ad2fbaaaf026091a9a3a5606f681",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 810,
        "y": 60,
        "wires": [
            [
                "e43a4752f681f97c",
                "87918d4cbd424db1"
            ]
        ]
    },
    {
        "id": "b863ea11adc07bb7",
        "type": "http request",
        "z": "130060434246f931",
        "g": "e26b08628d1dd205",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1170,
        "y": 60,
        "wires": [
            [
                "64f2223ec2751de7"
            ]
        ]
    },
    {
        "id": "e43a4752f681f97c",
        "type": "function",
        "z": "130060434246f931",
        "g": "e26b08628d1dd205",
        "name": "prepare request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/entities/${msg.id}`;\n\nmsg.headers = {};\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 60,
        "wires": [
            [
                "b863ea11adc07bb7"
            ]
        ]
    },
    {
        "id": "64f2223ec2751de7",
        "type": "debug",
        "z": "130060434246f931",
        "g": "e26b08628d1dd205",
        "name": "Stellio entity",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1370,
        "y": 60,
        "wires": []
    },
    {
        "id": "3a4a83cc92bafd59",
        "type": "http request",
        "z": "130060434246f931",
        "g": "e26b08628d1dd205",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1170,
        "y": 120,
        "wires": [
            [
                "ce67f8aa3a0aadb0"
            ]
        ]
    },
    {
        "id": "87918d4cbd424db1",
        "type": "function",
        "z": "130060434246f931",
        "g": "e26b08628d1dd205",
        "name": "prepare request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/temporal/entities/${msg.id}`;\n\nmsg.headers = {};\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 120,
        "wires": [
            [
                "3a4a83cc92bafd59"
            ]
        ]
    },
    {
        "id": "ce67f8aa3a0aadb0",
        "type": "debug",
        "z": "130060434246f931",
        "g": "e26b08628d1dd205",
        "name": "Stellio entity history",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1390,
        "y": 120,
        "wires": []
    },
    {
        "id": "145a9bcf92b28837",
        "type": "inject",
        "z": "279efa75137f8875",
        "name": "inject",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            },
            {
                "p": "payload"
            },
            {
                "p": "payload[0]",
                "v": "nextbike_kk",
                "vt": "str"
            },
            {
                "p": "payload[1]",
                "v": "zeus_konstanz",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/15 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "7acb43a82774b9ab"
            ]
        ]
    },
    {
        "id": "ad11b6acc41d2d5b",
        "type": "http request",
        "z": "279efa75137f8875",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 330,
        "y": 540,
        "wires": [
            [
                "6b7982934d3d6ff4",
                "3530b3f2f4ac54bc"
            ]
        ]
    },
    {
        "id": "6b7982934d3d6ff4",
        "type": "debug",
        "z": "279efa75137f8875",
        "name": "GBFS response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 520,
        "y": 540,
        "wires": []
    },
    {
        "id": "7acb43a82774b9ab",
        "type": "debug",
        "z": "279efa75137f8875",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "dca9739ceb14133b",
        "type": "split",
        "z": "279efa75137f8875",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 130,
        "y": 480,
        "wires": [
            [
                "877bce3719503373"
            ]
        ]
    },
    {
        "id": "877bce3719503373",
        "type": "function",
        "z": "279efa75137f8875",
        "name": "prepare req",
        "func": "msg.url = msg.payload.feed.url;\nmsg.gbfs_topic = msg.payload.topic;\nmsg.gbfs_type = msg.payload.feed.name;\nmsg.payload = '';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 540,
        "wires": [
            [
                "ad11b6acc41d2d5b"
            ]
        ]
    },
    {
        "id": "9b3f87d3ae82233f",
        "type": "function",
        "z": "279efa75137f8875",
        "name": "prepare Stellio request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/entityOperations/upsert?options=update`;\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = 'application/ld+json';\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 780,
        "wires": [
            [
                "48f8855b3840e6c2"
            ]
        ]
    },
    {
        "id": "bb8fae8a5009750b",
        "type": "debug",
        "z": "279efa75137f8875",
        "name": "Stellio response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 560,
        "y": 780,
        "wires": []
    },
    {
        "id": "48f8855b3840e6c2",
        "type": "http request",
        "z": "279efa75137f8875",
        "name": "POST",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 780,
        "wires": [
            [
                "bb8fae8a5009750b",
                "2a142091a421a4d7"
            ]
        ]
    },
    {
        "id": "3530b3f2f4ac54bc",
        "type": "function",
        "z": "279efa75137f8875",
        "name": "build SDM JSON-LD",
        "func": "let observedAt = new Date(msg.timestamp).toISOString()\n\nfunction property(value) {\n    return {\n        type: \"Property\",\n        value,\n        observedAt,\n    }\n}\n\nconst x = msg.payload\n\nconst observation = {\n    id : `urn:sdm:gbfs:${msg.gbfs_type}:mobidata:${msg.gbfs_topic}`,\n    type: msg.gbfs_type,\n    last_updated: property(x.last_updated),\n    ttl: property(x.ttl),\n    data: property(x.data),\n    version: property(x.version),\n    '@context': [\n        // 'https://raw.githubusercontent.com/smart-data-models/dataModel.GBFS/45233d3987bcf2737913652d04681941c2a39433/context.jsonld'\n    ],\n};\n\nreturn {\n    parts: msg.parts,\n    payload : observation,\n    timestamp: msg.timestamp,\n    }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 600,
        "wires": [
            [
                "30152607da8d4f23"
            ]
        ]
    },
    {
        "id": "30152607da8d4f23",
        "type": "join",
        "z": "279efa75137f8875",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 130,
        "y": 680,
        "wires": [
            [
                "dc8410fec5e5a624",
                "ae3d989b9cebd5d1",
                "9b3f87d3ae82233f"
            ]
        ]
    },
    {
        "id": "2a142091a421a4d7",
        "type": "debug",
        "z": "279efa75137f8875",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 550,
        "y": 860,
        "wires": []
    },
    {
        "id": "dc8410fec5e5a624",
        "type": "debug",
        "z": "279efa75137f8875",
        "name": "first SDM JSON-LD",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 660,
        "wires": []
    },
    {
        "id": "ae3d989b9cebd5d1",
        "type": "debug",
        "z": "279efa75137f8875",
        "name": "# observations",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 500,
        "y": 700,
        "wires": []
    },
    {
        "id": "5dea5eb768188c1d",
        "type": "http request",
        "z": "279efa75137f8875",
        "name": "GET feed list",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 170,
        "y": 360,
        "wires": [
            [
                "2be2dc634fd2067c"
            ]
        ]
    },
    {
        "id": "ae2dbea6a3d1aeaf",
        "type": "debug",
        "z": "279efa75137f8875",
        "name": "GBFS feeds",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 570,
        "y": 360,
        "wires": []
    },
    {
        "id": "645a6228433248cc",
        "type": "split",
        "z": "279efa75137f8875",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 130,
        "y": 240,
        "wires": [
            [
                "c12048c59854e9c7"
            ]
        ]
    },
    {
        "id": "c12048c59854e9c7",
        "type": "change",
        "z": "279efa75137f8875",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "gbfs_topic",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 240,
        "wires": [
            [
                "17319f509ed87e79"
            ]
        ]
    },
    {
        "id": "17319f509ed87e79",
        "type": "function",
        "z": "279efa75137f8875",
        "name": "prepare req",
        "func": "msg.url = `https://api.mobidata-bw.de/sharing/gbfs/v2/${msg.gbfs_topic}/gbfs`;\nmsg.payload = '';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 300,
        "wires": [
            [
                "5dea5eb768188c1d"
            ]
        ]
    },
    {
        "id": "2be2dc634fd2067c",
        "type": "function",
        "z": "279efa75137f8875",
        "name": "read feed list",
        "func": "const first_lang = Object.keys(msg.payload.data)[0];\n\nconst feeds = msg.payload.data[first_lang].feeds;\n\nmsg.payload = feeds.map(x => ({\n        feed : x,\n        topic: msg.gbfs_topic,\n}))\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 360,
        "wires": [
            [
                "ae2dbea6a3d1aeaf",
                "8d4026d5a7186443"
            ]
        ]
    },
    {
        "id": "8d4026d5a7186443",
        "type": "join",
        "z": "279efa75137f8875",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 130,
        "y": 420,
        "wires": [
            [
                "8569d375d416f152"
            ]
        ]
    },
    {
        "id": "e7417e81f35abab4",
        "type": "debug",
        "z": "279efa75137f8875",
        "name": "GBFS feeds",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 570,
        "y": 420,
        "wires": []
    },
    {
        "id": "8569d375d416f152",
        "type": "function",
        "z": "279efa75137f8875",
        "name": "flatten",
        "func": "msg.payload = msg.payload.flat()\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 420,
        "wires": [
            [
                "e7417e81f35abab4",
                "dca9739ceb14133b"
            ]
        ]
    },
    {
        "id": "3b60f20f0636bcc3",
        "type": "comment",
        "z": "279efa75137f8875",
        "name": "Smart Data Model: GBFS",
        "info": "",
        "x": 150,
        "y": 80,
        "wires": []
    },
    {
        "id": "5ff30e7fc977dac9",
        "type": "comment",
        "z": "279efa75137f8875",
        "name": "Mobidata GBFS für Konrad und Zeus",
        "info": "",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "1de523737cc1bac1",
        "type": "inject",
        "z": "279efa75137f8875",
        "g": "0976576945adbcee",
        "name": "set id",
        "props": [
            {
                "p": "id",
                "v": "urn:sdm:gbfs:station_information:mobidata:nextbike_kk",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 810,
        "y": 60,
        "wires": [
            [
                "fefcdc2f97175db6"
            ]
        ]
    },
    {
        "id": "16f135259c7d0fe0",
        "type": "http request",
        "z": "279efa75137f8875",
        "g": "0976576945adbcee",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1170,
        "y": 60,
        "wires": [
            [
                "b595de17122fc679"
            ]
        ]
    },
    {
        "id": "e4ef25c8647de9f5",
        "type": "function",
        "z": "279efa75137f8875",
        "g": "0976576945adbcee",
        "name": "prepare request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/entities/${msg.id}`;\n\nmsg.headers = {};\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 60,
        "wires": [
            [
                "16f135259c7d0fe0"
            ]
        ]
    },
    {
        "id": "b595de17122fc679",
        "type": "debug",
        "z": "279efa75137f8875",
        "g": "0976576945adbcee",
        "name": "Stellio entity",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1370,
        "y": 60,
        "wires": []
    },
    {
        "id": "96825e5cde62bf3b",
        "type": "http request",
        "z": "279efa75137f8875",
        "g": "0976576945adbcee",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1170,
        "y": 120,
        "wires": [
            [
                "2ca8f9151e363a06"
            ]
        ]
    },
    {
        "id": "fefcdc2f97175db6",
        "type": "function",
        "z": "279efa75137f8875",
        "g": "0976576945adbcee",
        "name": "prepare request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/temporal/entities/${msg.id}?options=temporalValues`;\n\nmsg.headers = {};\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\nmsg.headers[\"Link\"] = '<https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context-v1.8.jsonld>; rel=\"http://www.w3.org/ns/json-ld#context\"; type=\"application/ld+json\"'\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 120,
        "wires": [
            [
                "96825e5cde62bf3b"
            ]
        ]
    },
    {
        "id": "2ca8f9151e363a06",
        "type": "debug",
        "z": "279efa75137f8875",
        "g": "0976576945adbcee",
        "name": "Stellio entity history",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1390,
        "y": 120,
        "wires": []
    },
    {
        "id": "f52718f897020a92",
        "type": "inject",
        "z": "50940b605fe0d135",
        "g": "81d3198b85645e10",
        "name": "set id",
        "props": [
            {
                "p": "id",
                "v": "urn:raw:obcpdb:mobidata:konstanz_area",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 810,
        "y": 80,
        "wires": [
            [
                "39bfd399e38de3fe",
                "8cc62f53c016ddfa"
            ]
        ]
    },
    {
        "id": "09557e47e2ed1b35",
        "type": "http request",
        "z": "50940b605fe0d135",
        "g": "81d3198b85645e10",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1170,
        "y": 80,
        "wires": [
            [
                "0dd3c8151e991918"
            ]
        ]
    },
    {
        "id": "39bfd399e38de3fe",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "81d3198b85645e10",
        "name": "prepare request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/entities/${msg.id}`;\n\nmsg.headers = {};\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 80,
        "wires": [
            [
                "09557e47e2ed1b35"
            ]
        ]
    },
    {
        "id": "0dd3c8151e991918",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "81d3198b85645e10",
        "name": "Stellio entity",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1370,
        "y": 80,
        "wires": []
    },
    {
        "id": "32df7b0e6f61b5bf",
        "type": "http request",
        "z": "50940b605fe0d135",
        "g": "81d3198b85645e10",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1170,
        "y": 140,
        "wires": [
            [
                "2e641ad7068c1df0"
            ]
        ]
    },
    {
        "id": "8cc62f53c016ddfa",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "81d3198b85645e10",
        "name": "prepare request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/temporal/entities/${msg.id}`;\n\nmsg.headers = {};\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 140,
        "wires": [
            [
                "32df7b0e6f61b5bf"
            ]
        ]
    },
    {
        "id": "2e641ad7068c1df0",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "81d3198b85645e10",
        "name": "Stellio entity history",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1390,
        "y": 140,
        "wires": []
    },
    {
        "id": "bd8d2768304e37fb",
        "type": "inject",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "inject",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "00 03 * * 2",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 80,
        "wires": [
            [
                "492ee54e54f607a7"
            ]
        ]
    },
    {
        "id": "492ee54e54f607a7",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 530,
        "y": 80,
        "wires": []
    },
    {
        "id": "ab2f5f236acc5f46",
        "type": "http request",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "GET locations",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 180,
        "y": 240,
        "wires": [
            [
                "d0f4b03ae99c8351",
                "2d89db399f069a18",
                "0d50438015d7681a"
            ]
        ]
    },
    {
        "id": "d0f4b03ae99c8351",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "OCDB response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 520,
        "y": 300,
        "wires": []
    },
    {
        "id": "661e9b913953ba69",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "build JSON-LD",
        "func": "let observedAt = new Date(msg.timestamp).toISOString()\n\nfunction property(value) {\n    return {\n        type: \"Property\",\n        value,\n        observedAt,\n    }\n}\n\nconst observation = {\n    id: 'urn:raw:obcpdb:mobidata:konstanz_area',\n    type: 'raw_ocpdb',\n    data: property(JSON.stringify(msg.payload)),\n    '@context': [ ],\n};\n\nreturn {\n    payload : [observation],\n    timestamp: msg.timestamp,\n    }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 420,
        "wires": [
            [
                "192b12dc023bff79",
                "77e5e0f98219cf4d"
            ]
        ]
    },
    {
        "id": "192b12dc023bff79",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "raw JSON-LD",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 420,
        "wires": []
    },
    {
        "id": "ef380b50cc54522a",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "set msg.base_url and msg.path",
        "func": "msg.base_url = 'https://api.mobidata-bw.de/ocpdb'\nmsg.path = '/api/public/v1/locations'\nmsg.path += '?lon=9.14&lat=47.7&radius=7920'\n\n// test pagination with\n// msg.path += '?lon=9.14&lat=47.7&radius=7920&limit=10'\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 140,
        "wires": [
            [
                "1095181b19e43685"
            ]
        ]
    },
    {
        "id": "2d89db399f069a18",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "pagination: continue",
        "func": "if (msg.payload.hasOwnProperty('next_path')) {\n    msg.path = msg.payload['next_path']\n    return msg\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 240,
        "wires": [
            [
                "1095181b19e43685"
            ]
        ]
    },
    {
        "id": "1095181b19e43685",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "set msg.url",
        "func": "msg.url = msg.base_url + msg.path\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 140,
        "wires": [
            [
                "ab2f5f236acc5f46"
            ]
        ]
    },
    {
        "id": "5c9b4f93bccb15aa",
        "type": "join",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 170,
        "y": 360,
        "wires": [
            [
                "9f08d12ea3b3c88e"
            ]
        ]
    },
    {
        "id": "0d50438015d7681a",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "pagination: prep join",
        "func": "if (!msg.payload.hasOwnProperty('next_path')) {\n    msg.complete = true;\n}\nmsg.payload = msg.payload.items\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 300,
        "wires": [
            [
                "5c9b4f93bccb15aa"
            ]
        ]
    },
    {
        "id": "77e5e0f98219cf4d",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "prepare Stellio request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/entityOperations/upsert?options=update`;\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = 'application/ld+json';\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 480,
        "wires": [
            [
                "a1c946c9a4229481"
            ]
        ]
    },
    {
        "id": "a3ae30d5e2cd4afa",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "Stellio response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 560,
        "y": 480,
        "wires": []
    },
    {
        "id": "a1c946c9a4229481",
        "type": "http request",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "POST",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 480,
        "wires": [
            [
                "a3ae30d5e2cd4afa",
                "64b1a1ff9f6f14af"
            ]
        ]
    },
    {
        "id": "64b1a1ff9f6f14af",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 550,
        "y": 560,
        "wires": []
    },
    {
        "id": "d39d45b2f3cc835e",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "# items",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 500,
        "y": 360,
        "wires": []
    },
    {
        "id": "9f08d12ea3b3c88e",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "18958834c5323352",
        "name": "flatten",
        "func": "msg.payload = msg.payload.flat()\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 360,
        "wires": [
            [
                "661e9b913953ba69",
                "d39d45b2f3cc835e"
            ]
        ]
    },
    {
        "id": "0907d04275ebde7a",
        "type": "inject",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "inject",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "00 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 680,
        "wires": [
            [
                "a4e4d8b358e5ab48"
            ]
        ]
    },
    {
        "id": "a4e4d8b358e5ab48",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 530,
        "y": 680,
        "wires": []
    },
    {
        "id": "fa2f382b876ba2b9",
        "type": "http request",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "GET locations",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 180,
        "y": 840,
        "wires": [
            [
                "2eeff5c2b04351b4",
                "1ff92a421c068255",
                "2e904d7692faf822"
            ]
        ]
    },
    {
        "id": "2eeff5c2b04351b4",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "OCDB response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 520,
        "y": 900,
        "wires": []
    },
    {
        "id": "c52f32bc1de5cde5",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "build JSON-LD",
        "func": "let observedAt = new Date(msg.timestamp).toISOString()\n\nfunction property(value) {\n    return {\n        type: \"Property\",\n        value,\n        observedAt,\n    }\n}\n\nfunction point({lon, lat}) {\n    return {\n        type: \"GeoProperty\",\n        value: {\n            type: \"Point\",\n            coordinates: [lon, lat],\n        },\n        observedAt,\n    }\n}\n\nmsg.payload.map(x => {\n    x.id = x.id.toString();\n})\n\nconst observations = msg.payload.map(x => (\n    x.evses.map( y => ({\n        id: `urn:sdm:EVChargingStation:mobidata:${y.uid}`,\n        type: 'EVChargingStation',\n        alternateName: property(y.uid),\n        address: property({\n            addressCountry: x.country,\n            addressRegion: x.state || null,\n            addressLocality: x.city,\n            streetAddress: x.address,\n            postalCode: x.postal_code,\n        }),\n        dataProvider: property(`mobidata, ${x.source}`),\n        location: point({\n            lat: Number(x.coordinates.lat),\n            lon: Number(x.coordinates.lon),\n            }),\n        operator: property(x.operator.name),\n        observationDateTime: property(y.last_updated),\n        socketNumber: property(y.connectors.length),\n        socketType: property(y.connectors.map(x => x.standard)),\n        powerConsumption: property(Math.max(...y.connectors.map(x => x.max_electric_power))),\n        // raw_ocpdb_item: property(x),\n        '@context': [],\n    }))\n)).flat();\n\nreturn {\n    payload : observations,\n    timestamp: msg.timestamp,\n    }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1040,
        "wires": [
            [
                "4fd2d351117d5831",
                "9e359282cc553c91",
                "58609bb0f309d986"
            ]
        ]
    },
    {
        "id": "4fd2d351117d5831",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "first JSON-LD",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 1020,
        "wires": []
    },
    {
        "id": "0f1dd9a3a8c0a9ac",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "set msg.base_url and msg.path",
        "func": "msg.base_url = 'https://api.mobidata-bw.de/ocpdb'\nmsg.path = '/api/public/v1/locations'\nmsg.path += '?lon=9.14&lat=47.7&radius=7920'\n\n// test pagination with\n// msg.path += '?lon=9.14&lat=47.7&radius=7920&limit=10'\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 740,
        "wires": [
            [
                "878584f7de3888a0"
            ]
        ]
    },
    {
        "id": "1ff92a421c068255",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "pagination: continue",
        "func": "if (msg.payload.hasOwnProperty('next_path')) {\n    msg.path = msg.payload['next_path']\n    return msg\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 840,
        "wires": [
            [
                "878584f7de3888a0"
            ]
        ]
    },
    {
        "id": "878584f7de3888a0",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "set msg.url",
        "func": "msg.url = msg.base_url + msg.path\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 740,
        "wires": [
            [
                "fa2f382b876ba2b9"
            ]
        ]
    },
    {
        "id": "aefc57e4e237a029",
        "type": "join",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 170,
        "y": 960,
        "wires": [
            [
                "cc55337bcbc6863d"
            ]
        ]
    },
    {
        "id": "2e904d7692faf822",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "pagination: prep join",
        "func": "if (!msg.payload.hasOwnProperty('next_path')) {\n    msg.complete = true;\n}\nmsg.payload = msg.payload.items\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 900,
        "wires": [
            [
                "aefc57e4e237a029"
            ]
        ]
    },
    {
        "id": "9e359282cc553c91",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "prepare Stellio request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/entityOperations/upsert?options=update`;\n\nmsg.headers = {};\nmsg.headers[\"Content-Type\"] = 'application/ld+json';\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1140,
        "wires": [
            [
                "b0eaedb9ee95fd31"
            ]
        ]
    },
    {
        "id": "0483fbd63df27657",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "Stellio response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 560,
        "y": 1140,
        "wires": []
    },
    {
        "id": "b0eaedb9ee95fd31",
        "type": "http request",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "POST",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 1140,
        "wires": [
            [
                "0483fbd63df27657",
                "07920faaf573d8bd"
            ]
        ]
    },
    {
        "id": "07920faaf573d8bd",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 550,
        "y": 1220,
        "wires": []
    },
    {
        "id": "17346f7fabb649dc",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "# locations",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 510,
        "y": 960,
        "wires": []
    },
    {
        "id": "cc55337bcbc6863d",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "flatten",
        "func": "msg.payload = msg.payload.flat()\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 960,
        "wires": [
            [
                "c52f32bc1de5cde5",
                "17346f7fabb649dc"
            ]
        ]
    },
    {
        "id": "58609bb0f309d986",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "2c212039c596ad4f",
        "name": "# stations",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 500,
        "y": 1060,
        "wires": []
    },
    {
        "id": "3081c1c5159b8ff1",
        "type": "inject",
        "z": "50940b605fe0d135",
        "g": "1edfe0b06c1b04db",
        "name": "set id",
        "props": [
            {
                "p": "id",
                "v": "urn:sdm:EVChargingStation:mobidata:BNETZA*2f3f146a944055391caf*0*2",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 810,
        "y": 680,
        "wires": [
            [
                "93ef6e8bd3e995dc",
                "6b735c1d6fc275a0"
            ]
        ]
    },
    {
        "id": "a7419744e0843ad5",
        "type": "http request",
        "z": "50940b605fe0d135",
        "g": "1edfe0b06c1b04db",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1170,
        "y": 680,
        "wires": [
            [
                "82747105a7c9d6e5"
            ]
        ]
    },
    {
        "id": "93ef6e8bd3e995dc",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "1edfe0b06c1b04db",
        "name": "prepare request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/entities/${msg.id}`;\n\nmsg.headers = {};\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 680,
        "wires": [
            [
                "a7419744e0843ad5"
            ]
        ]
    },
    {
        "id": "82747105a7c9d6e5",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "1edfe0b06c1b04db",
        "name": "Stellio entity",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1370,
        "y": 680,
        "wires": []
    },
    {
        "id": "0b7bc51b6926fbbd",
        "type": "http request",
        "z": "50940b605fe0d135",
        "g": "1edfe0b06c1b04db",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1170,
        "y": 740,
        "wires": [
            [
                "055be2d5c94e15c1"
            ]
        ]
    },
    {
        "id": "6b735c1d6fc275a0",
        "type": "function",
        "z": "50940b605fe0d135",
        "g": "1edfe0b06c1b04db",
        "name": "prepare request",
        "func": "const stellio = env.get(\"STELLIO_API_URL\") + \"/ngsi-ld/v1\"\nmsg.url = `${stellio}/temporal/entities/${msg.id}`;\n\nmsg.headers = {};\nmsg.headers[\"NGSILD-Tenant\"] = env.get('FIWARE_SERVICE');\nmsg.headers[\"Fiware-ServicePath\"] = '/';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 740,
        "wires": [
            [
                "0b7bc51b6926fbbd"
            ]
        ]
    },
    {
        "id": "055be2d5c94e15c1",
        "type": "debug",
        "z": "50940b605fe0d135",
        "g": "1edfe0b06c1b04db",
        "name": "Stellio entity history",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1390,
        "y": 740,
        "wires": []
    },
    {
        "id": "b04218a35be66552",
        "type": "function",
        "z": "3ea68b5de28cd37e",
        "g": "f31b7352a85a08b3",
        "name": "Define Statements (CREATE TABLE, ...)",
        "func": "msg.payload = []\nmsg.payload[0] = `\nCREATE TABLE mobidata_gbfs (\n    time timestamptz NOT NULL,\n    topic text NOT NULL,\n    feed jsonb NOT NULL,\n    gbfs jsonb NOT NULL\n)\n`;\n\nmsg.payload[1] = `SELECT create_hypertable('mobidata_gbfs', 'time')`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1280,
        "wires": [
            [
                "85341e6bc5218f39"
            ]
        ]
    },
    {
        "id": "85341e6bc5218f39",
        "type": "split",
        "z": "3ea68b5de28cd37e",
        "g": "f31b7352a85a08b3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 1280,
        "wires": [
            [
                "29d336ad9ebed4aa"
            ]
        ]
    },
    {
        "id": "29d336ad9ebed4aa",
        "type": "function",
        "z": "3ea68b5de28cd37e",
        "g": "f31b7352a85a08b3",
        "name": "Configure PostgREST request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/rpc/mgmt`;\nmsg.headers = {\n    'Content-Type': 'text/plain',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1140,
        "wires": [
            [
                "87e1c238ba747f8a",
                "e088d961c00c0c64"
            ]
        ]
    },
    {
        "id": "87e1c238ba747f8a",
        "type": "debug",
        "z": "3ea68b5de28cd37e",
        "g": "f31b7352a85a08b3",
        "name": "Exec Statement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1140,
        "wires": []
    },
    {
        "id": "1fbe6c93d90c0b79",
        "type": "inject",
        "z": "3ea68b5de28cd37e",
        "g": "f31b7352a85a08b3",
        "name": "create",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1280,
        "wires": [
            [
                "b04218a35be66552"
            ]
        ]
    },
    {
        "id": "e0b623ba937fb12c",
        "type": "function",
        "z": "3ea68b5de28cd37e",
        "g": "da2c1bbb8bc09422",
        "name": "Define Statement (DROP TABLE)",
        "func": "msg.payload = `DROP TABLE IF EXISTS mobidata_gbfs`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1140,
        "wires": [
            [
                "29d336ad9ebed4aa"
            ]
        ]
    },
    {
        "id": "0d05b3f021081b93",
        "type": "inject",
        "z": "3ea68b5de28cd37e",
        "g": "da2c1bbb8bc09422",
        "name": "clean + recreate",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 1160,
        "wires": [
            [
                "e17723de69b8687a",
                "e0b623ba937fb12c"
            ]
        ]
    },
    {
        "id": "e17723de69b8687a",
        "type": "delay",
        "z": "3ea68b5de28cd37e",
        "g": "da2c1bbb8bc09422",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 1200,
        "wires": [
            [
                "b04218a35be66552"
            ]
        ]
    },
    {
        "id": "b8669da2f14aacf2",
        "type": "inject",
        "z": "3ea68b5de28cd37e",
        "g": "8384c06ee6c789f5",
        "name": "inject",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            },
            {
                "p": "payload"
            },
            {
                "p": "payload[0]",
                "v": "nextbike_kk",
                "vt": "str"
            },
            {
                "p": "payload[1]",
                "v": "zeus_konstanz",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "*/15 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "35988d545ebb4bab",
                "eb0dedc7940396dc"
            ]
        ]
    },
    {
        "id": "35988d545ebb4bab",
        "type": "debug",
        "z": "3ea68b5de28cd37e",
        "g": "8384c06ee6c789f5",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 590,
        "y": 160,
        "wires": []
    },
    {
        "id": "44e9de72054ecb19",
        "type": "comment",
        "z": "3ea68b5de28cd37e",
        "g": "8384c06ee6c789f5",
        "name": "<-- define GBFS topics here",
        "info": "",
        "x": 360,
        "y": 160,
        "wires": []
    },
    {
        "id": "725e98ee40419995",
        "type": "http request",
        "z": "3ea68b5de28cd37e",
        "g": "674e01e669cc47b5",
        "name": "GET feed list",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "3cd3aeebb6972223"
            ]
        ]
    },
    {
        "id": "586cd0e345ed2228",
        "type": "debug",
        "z": "3ea68b5de28cd37e",
        "g": "674e01e669cc47b5",
        "name": "GBFS feeds",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 750,
        "y": 320,
        "wires": []
    },
    {
        "id": "eb0dedc7940396dc",
        "type": "split",
        "z": "3ea68b5de28cd37e",
        "g": "674e01e669cc47b5",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 150,
        "y": 260,
        "wires": [
            [
                "2474dad97a381703"
            ]
        ]
    },
    {
        "id": "2474dad97a381703",
        "type": "change",
        "z": "3ea68b5de28cd37e",
        "g": "674e01e669cc47b5",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "gbfs_topic",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 260,
        "wires": [
            [
                "d1b850504843013b"
            ]
        ]
    },
    {
        "id": "d1b850504843013b",
        "type": "function",
        "z": "3ea68b5de28cd37e",
        "g": "674e01e669cc47b5",
        "name": "prepare req",
        "func": "msg.url = `https://api.mobidata-bw.de/sharing/gbfs/v2/${msg.gbfs_topic}/gbfs`;\nmsg.payload = '';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 320,
        "wires": [
            [
                "725e98ee40419995"
            ]
        ]
    },
    {
        "id": "3cd3aeebb6972223",
        "type": "function",
        "z": "3ea68b5de28cd37e",
        "g": "674e01e669cc47b5",
        "name": "read feed list",
        "func": "const first_lang = Object.keys(msg.payload.data)[0];\n\nconst feeds = msg.payload.data[first_lang].feeds;\n\nmsg.payload = feeds.map(x => ({\n        feed : x,\n        topic: msg.gbfs_topic,\n}))\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 320,
        "wires": [
            [
                "586cd0e345ed2228",
                "1896a347abfeaf77"
            ]
        ]
    },
    {
        "id": "1896a347abfeaf77",
        "type": "join",
        "z": "3ea68b5de28cd37e",
        "g": "674e01e669cc47b5",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 150,
        "y": 380,
        "wires": [
            [
                "f0d28104061b252b"
            ]
        ]
    },
    {
        "id": "8e317953c6fb8245",
        "type": "debug",
        "z": "3ea68b5de28cd37e",
        "g": "674e01e669cc47b5",
        "name": "first GBFS feed info",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 610,
        "y": 380,
        "wires": []
    },
    {
        "id": "f0d28104061b252b",
        "type": "function",
        "z": "3ea68b5de28cd37e",
        "g": "674e01e669cc47b5",
        "name": "flatten",
        "func": "msg.payload = msg.payload.flat()\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 380,
        "wires": [
            [
                "8e317953c6fb8245",
                "2334537c7b5cf2e0"
            ]
        ]
    },
    {
        "id": "8d0159e619f36512",
        "type": "http request",
        "z": "3ea68b5de28cd37e",
        "g": "6d159c2b70f936e3",
        "name": "GET",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 560,
        "wires": [
            [
                "fec46b05d49585f9",
                "2034918cac6438f9"
            ]
        ]
    },
    {
        "id": "fec46b05d49585f9",
        "type": "debug",
        "z": "3ea68b5de28cd37e",
        "g": "6d159c2b70f936e3",
        "name": "GBFS response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 540,
        "y": 560,
        "wires": []
    },
    {
        "id": "2334537c7b5cf2e0",
        "type": "split",
        "z": "3ea68b5de28cd37e",
        "g": "6d159c2b70f936e3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "c67906894c4bbfb8"
            ]
        ]
    },
    {
        "id": "c67906894c4bbfb8",
        "type": "function",
        "z": "3ea68b5de28cd37e",
        "g": "6d159c2b70f936e3",
        "name": "prepare req",
        "func": "msg.info = msg.payload;\nmsg.url = msg.payload.feed.url;\nmsg.payload = '';\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 560,
        "wires": [
            [
                "8d0159e619f36512"
            ]
        ]
    },
    {
        "id": "686bdfbb95377093",
        "type": "join",
        "z": "3ea68b5de28cd37e",
        "g": "6d159c2b70f936e3",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 150,
        "y": 680,
        "wires": [
            [
                "aea905b538edc5ab",
                "45f3571c533a5ee1",
                "00fe3a687c00620c"
            ]
        ]
    },
    {
        "id": "aea905b538edc5ab",
        "type": "debug",
        "z": "3ea68b5de28cd37e",
        "g": "6d159c2b70f936e3",
        "name": "first row",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 680,
        "wires": []
    },
    {
        "id": "45f3571c533a5ee1",
        "type": "debug",
        "z": "3ea68b5de28cd37e",
        "g": "6d159c2b70f936e3",
        "name": "# rows",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 490,
        "y": 740,
        "wires": []
    },
    {
        "id": "2034918cac6438f9",
        "type": "function",
        "z": "3ea68b5de28cd37e",
        "g": "6d159c2b70f936e3",
        "name": "build row",
        "func": "msg.payload = {\n    'time': new Date(msg.timestamp).toISOString(),\n    'topic': msg.info.topic,\n    'feed': msg.info.feed,\n    'gbfs': msg.payload,\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 620,
        "wires": [
            [
                "686bdfbb95377093"
            ]
        ]
    },
    {
        "id": "00fe3a687c00620c",
        "type": "function",
        "z": "3ea68b5de28cd37e",
        "g": "41645733b4592f63",
        "name": "Configure PostgREST request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/mobidata_gbfs`;\nmsg.headers = {\n    'Content-Type': 'application/json',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 860,
        "wires": [
            [
                "93e70b2a358e345e",
                "70847b2baff0c73d"
            ]
        ]
    },
    {
        "id": "70847b2baff0c73d",
        "type": "debug",
        "z": "3ea68b5de28cd37e",
        "g": "41645733b4592f63",
        "name": "Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 860,
        "wires": []
    },
    {
        "id": "93e70b2a358e345e",
        "type": "http request",
        "z": "3ea68b5de28cd37e",
        "g": "41645733b4592f63",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 230,
        "y": 940,
        "wires": [
            [
                "e877cd13dd0095ee",
                "52635ab420ac9b57"
            ]
        ]
    },
    {
        "id": "e877cd13dd0095ee",
        "type": "debug",
        "z": "3ea68b5de28cd37e",
        "g": "41645733b4592f63",
        "name": "Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 480,
        "y": 920,
        "wires": []
    },
    {
        "id": "52635ab420ac9b57",
        "type": "debug",
        "z": "3ea68b5de28cd37e",
        "g": "41645733b4592f63",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 490,
        "y": 980,
        "wires": []
    },
    {
        "id": "e088d961c00c0c64",
        "type": "delay",
        "z": "3ea68b5de28cd37e",
        "g": "f31b7352a85a08b3",
        "name": "",
        "pauseType": "rate",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 940,
        "y": 1220,
        "wires": [
            [
                "58418485d82d35f8",
                "0c4ffdb827fb74cf"
            ]
        ]
    },
    {
        "id": "0c4ffdb827fb74cf",
        "type": "debug",
        "z": "3ea68b5de28cd37e",
        "g": "f31b7352a85a08b3",
        "name": "Exec Statement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1220,
        "wires": []
    },
    {
        "id": "58418485d82d35f8",
        "type": "http request",
        "z": "3ea68b5de28cd37e",
        "g": "f31b7352a85a08b3",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 1280,
        "wires": [
            [
                "c4a38e65e6ac48b5"
            ]
        ]
    },
    {
        "id": "c4a38e65e6ac48b5",
        "type": "debug",
        "z": "3ea68b5de28cd37e",
        "g": "f31b7352a85a08b3",
        "name": "Exec Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1200,
        "y": 1280,
        "wires": []
    },
    {
        "id": "ee1d5d8f75b15b24",
        "type": "comment",
        "z": "3ea68b5de28cd37e",
        "name": "Raw data logging",
        "info": "",
        "x": 120,
        "y": 80,
        "wires": []
    },
    {
        "id": "5bea519e37119c6a",
        "type": "comment",
        "z": "3ea68b5de28cd37e",
        "name": "Mobidata GBFS für Konrad und Zeus",
        "info": "",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "83fd00e225c7e456",
        "type": "inject",
        "z": "7254d490dc8b92ae",
        "g": "ad0f8627a27fd460",
        "name": "",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "*/15 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "9117a1b92c1cb693",
                "d9195bb7bab1f2a7"
            ]
        ]
    },
    {
        "id": "9117a1b92c1cb693",
        "type": "http request",
        "z": "7254d490dc8b92ae",
        "g": "ad0f8627a27fd460",
        "name": "GET station_information",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.mobidata-bw.de/sharing/gbfs/v2/nextbike_kk/station_information",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 250,
        "y": 240,
        "wires": [
            [
                "77344e8dc255c475",
                "52086b90859658de"
            ]
        ]
    },
    {
        "id": "77344e8dc255c475",
        "type": "debug",
        "z": "7254d490dc8b92ae",
        "g": "ad0f8627a27fd460",
        "name": "station_information",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 550,
        "y": 240,
        "wires": []
    },
    {
        "id": "09ad74c825fd5404",
        "type": "function",
        "z": "7254d490dc8b92ae",
        "g": "ad0f8627a27fd460",
        "name": "build payload",
        "func": "let rows = []\n\nfunction point({lon, lat}) {\n    return `SRID=4326;POINT(${lon} ${lat})`\n}\n\nfor (const x of (msg.payload.data.stations)) {\n    const oDT = new Date(x.last_reported * 1000).toISOString();\n\n    rows.push({\n        time: new Date(msg.timestamp).toISOString(),\n        stationCode: x.station_id,\n        name: x.name,\n        alternateName: x.short_name,\n        availableBikeNumber: x.num_bikes_available,\n        location: point({lat: x.lat, lon: x.lon}),\n        freeSlotNumber: x.num_docks_available,\n        observationDateTime: oDT,\n    })\n}\n\nreturn {\n    payload : rows,\n    timestamp: msg.timestamp,\n    }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 500,
        "wires": [
            [
                "b27cc92944ec3fd7",
                "12073ae4cfe47bf3",
                "9b15d451f1b0f66a"
            ]
        ]
    },
    {
        "id": "b27cc92944ec3fd7",
        "type": "debug",
        "z": "7254d490dc8b92ae",
        "g": "ad0f8627a27fd460",
        "name": "payload[0]",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 480,
        "wires": []
    },
    {
        "id": "12073ae4cfe47bf3",
        "type": "debug",
        "z": "7254d490dc8b92ae",
        "g": "ad0f8627a27fd460",
        "name": "# rows",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 510,
        "y": 540,
        "wires": []
    },
    {
        "id": "8f3676de990a3a3e",
        "type": "http request",
        "z": "7254d490dc8b92ae",
        "g": "ad0f8627a27fd460",
        "name": "GET station_status",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.mobidata-bw.de/sharing/gbfs/v2/nextbike_kk/station_status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 230,
        "y": 360,
        "wires": [
            [
                "9ac01a61a7d50897",
                "ca90b60a31372939"
            ]
        ]
    },
    {
        "id": "9ac01a61a7d50897",
        "type": "debug",
        "z": "7254d490dc8b92ae",
        "g": "ad0f8627a27fd460",
        "name": "station_status",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 540,
        "y": 360,
        "wires": []
    },
    {
        "id": "52086b90859658de",
        "type": "change",
        "z": "7254d490dc8b92ae",
        "g": "ad0f8627a27fd460",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "info",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 220,
        "y": 300,
        "wires": [
            [
                "8f3676de990a3a3e"
            ]
        ]
    },
    {
        "id": "ca90b60a31372939",
        "type": "function",
        "z": "7254d490dc8b92ae",
        "g": "ad0f8627a27fd460",
        "name": "merge info into status",
        "func": "// prepare lookup table for station information\nvar info_table = {}\nfor (const x of (msg.info.data.stations)) {\n    info_table[x.station_id] = x;\n}\n\n// merge station information into payload / status status\nfor (const x of (msg.payload.data.stations)) {\n    Object.assign(x, info_table[x.station_id]);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 420,
        "wires": [
            [
                "cf87d65c1c8daf4d",
                "09ad74c825fd5404"
            ]
        ]
    },
    {
        "id": "cf87d65c1c8daf4d",
        "type": "debug",
        "z": "7254d490dc8b92ae",
        "g": "ad0f8627a27fd460",
        "name": "augmented station_status",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 570,
        "y": 420,
        "wires": []
    },
    {
        "id": "d9195bb7bab1f2a7",
        "type": "debug",
        "z": "7254d490dc8b92ae",
        "g": "ad0f8627a27fd460",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "4b888ea458a6c226",
        "type": "comment",
        "z": "7254d490dc8b92ae",
        "name": "Smart Data Model: Transportation.BikeHireDockingStation",
        "info": "",
        "x": 230,
        "y": 80,
        "wires": []
    },
    {
        "id": "55a6d415913f7150",
        "type": "comment",
        "z": "7254d490dc8b92ae",
        "name": "Konrad Leihrad Stationen aus Mobidata GBFS",
        "info": "",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "9b15d451f1b0f66a",
        "type": "function",
        "z": "7254d490dc8b92ae",
        "g": "978f49f12f8276c8",
        "name": "Configure PostgREST request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/mobidata_bikehiredockingstations`;\nmsg.headers = {\n    'Content-Type': 'application/json',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 640,
        "wires": [
            [
                "4dfe019a6018ed01",
                "5ac82a56106c156e"
            ]
        ]
    },
    {
        "id": "5ac82a56106c156e",
        "type": "debug",
        "z": "7254d490dc8b92ae",
        "g": "978f49f12f8276c8",
        "name": "Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 640,
        "wires": []
    },
    {
        "id": "4dfe019a6018ed01",
        "type": "http request",
        "z": "7254d490dc8b92ae",
        "g": "978f49f12f8276c8",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 270,
        "y": 720,
        "wires": [
            [
                "960256e4780d1904",
                "f17cf164ceb9544c"
            ]
        ]
    },
    {
        "id": "960256e4780d1904",
        "type": "debug",
        "z": "7254d490dc8b92ae",
        "g": "978f49f12f8276c8",
        "name": "Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 520,
        "y": 700,
        "wires": []
    },
    {
        "id": "f17cf164ceb9544c",
        "type": "debug",
        "z": "7254d490dc8b92ae",
        "g": "978f49f12f8276c8",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 530,
        "y": 760,
        "wires": []
    },
    {
        "id": "3ed39dfea1bcec72",
        "type": "function",
        "z": "7254d490dc8b92ae",
        "g": "dc11a833da7816df",
        "name": "Define Statements (CREATE TABLE, ...)",
        "func": "msg.payload = []\nmsg.payload[0] = `\nCREATE TABLE mobidata_bikehiredockingstations (\n    time timestamptz NOT NULL,\n    \"stationCode\" text NOT NULL,\n    name text NOT NULL,\n    \"alternateName\" text NOT NULL,\n    \"availableBikeNumber\" integer NOT NULL,\n    location geometry NOT NULL,\n    \"freeSlotNumber\" integer NOT NULL,\n    \"observationDateTime\" timestamptz NOT NULL\n)\n`;\n\nmsg.payload[1] = `SELECT create_hypertable('mobidata_bikehiredockingstations', 'time')`;\nmsg.payload[2] = `COMMENT ON TABLE mobidata_bikehiredockingstations IS 'Column types follow the smart data model Transportation.BikeHireDockingStation: https://github.com/smart-data-models/dataModel.Transportation/tree/master/BikeHireDockingStation'`\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1080,
        "wires": [
            [
                "050c502f17aeaadc"
            ]
        ]
    },
    {
        "id": "050c502f17aeaadc",
        "type": "split",
        "z": "7254d490dc8b92ae",
        "g": "dc11a833da7816df",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 1080,
        "wires": [
            [
                "17bf151937c6a8f3"
            ]
        ]
    },
    {
        "id": "17bf151937c6a8f3",
        "type": "function",
        "z": "7254d490dc8b92ae",
        "g": "dc11a833da7816df",
        "name": "Configure PostgREST request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/rpc/mgmt`;\nmsg.headers = {\n    'Content-Type': 'text/plain',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 940,
        "wires": [
            [
                "f22ca1b0081c2126",
                "b70fda7c2d04bd57"
            ]
        ]
    },
    {
        "id": "f22ca1b0081c2126",
        "type": "debug",
        "z": "7254d490dc8b92ae",
        "g": "dc11a833da7816df",
        "name": "Exec Statement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 940,
        "wires": []
    },
    {
        "id": "e050d224a69c5f67",
        "type": "inject",
        "z": "7254d490dc8b92ae",
        "g": "dc11a833da7816df",
        "name": "create",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1080,
        "wires": [
            [
                "3ed39dfea1bcec72"
            ]
        ]
    },
    {
        "id": "b9553a1cdb5e15c9",
        "type": "function",
        "z": "7254d490dc8b92ae",
        "g": "2a4cd8866b4b9d18",
        "name": "Define Statement (DROP TABLE)",
        "func": "msg.payload = `DROP TABLE IF EXISTS mobidata_bikehiredockingstations`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 940,
        "wires": [
            [
                "17bf151937c6a8f3"
            ]
        ]
    },
    {
        "id": "58771ea04a2073e4",
        "type": "inject",
        "z": "7254d490dc8b92ae",
        "g": "2a4cd8866b4b9d18",
        "name": "clean + recreate",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 960,
        "wires": [
            [
                "013fc7de7925c10e",
                "b9553a1cdb5e15c9"
            ]
        ]
    },
    {
        "id": "013fc7de7925c10e",
        "type": "delay",
        "z": "7254d490dc8b92ae",
        "g": "2a4cd8866b4b9d18",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 1000,
        "wires": [
            [
                "3ed39dfea1bcec72"
            ]
        ]
    },
    {
        "id": "b70fda7c2d04bd57",
        "type": "delay",
        "z": "7254d490dc8b92ae",
        "g": "dc11a833da7816df",
        "name": "",
        "pauseType": "rate",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 940,
        "y": 1020,
        "wires": [
            [
                "1630bf7f0a2f22d0",
                "1011bc6efbacb0c7"
            ]
        ]
    },
    {
        "id": "1011bc6efbacb0c7",
        "type": "debug",
        "z": "7254d490dc8b92ae",
        "g": "dc11a833da7816df",
        "name": "Exec Statement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 1020,
        "wires": []
    },
    {
        "id": "1630bf7f0a2f22d0",
        "type": "http request",
        "z": "7254d490dc8b92ae",
        "g": "dc11a833da7816df",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 930,
        "y": 1080,
        "wires": [
            [
                "1d3623bc18a517d0"
            ]
        ]
    },
    {
        "id": "1d3623bc18a517d0",
        "type": "debug",
        "z": "7254d490dc8b92ae",
        "g": "dc11a833da7816df",
        "name": "Exec Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1200,
        "y": 1080,
        "wires": []
    },
    {
        "id": "5ea21ab10b651e0d",
        "type": "inject",
        "z": "541e4b2a25f56a51",
        "g": "c7a0987960efee3f",
        "name": "",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "*/15 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "b889d8ea027ab160",
                "92f457e2c0b75d30"
            ]
        ]
    },
    {
        "id": "92f457e2c0b75d30",
        "type": "http request",
        "z": "541e4b2a25f56a51",
        "g": "c7a0987960efee3f",
        "name": "GET free_bike_status",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://api.mobidata-bw.de/sharing/gbfs/v2/zeus_konstanz/free_bike_status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 260,
        "y": 240,
        "wires": [
            [
                "874ee62094bc9501",
                "10a722b62f7439b6"
            ]
        ]
    },
    {
        "id": "874ee62094bc9501",
        "type": "debug",
        "z": "541e4b2a25f56a51",
        "g": "c7a0987960efee3f",
        "name": "free_bike_status",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 560,
        "y": 240,
        "wires": []
    },
    {
        "id": "10a722b62f7439b6",
        "type": "function",
        "z": "541e4b2a25f56a51",
        "g": "c7a0987960efee3f",
        "name": "build rows",
        "func": "let rows = []\n\nfunction point({lon, lat}) {\n    return `SRID=4326;POINT(${lon} ${lat})`\n}\n\nfor (const x of (msg.payload.data.bikes)) {\n    const oDT = new Date(x.last_reported * 1000).toISOString();\n    \n    var status = \"free\";\n    if (x.is_reserved) {\n        status += \", reserved\";\n    }\n    if (x.is_disabled) {\n        status += \", disabled\";\n    }\n\n    rows.push({\n        time: new Date(msg.timestamp).toISOString(),\n        fleetVehicleId: x.bike_id,\n        vehicleType: 'scooter',\n        location: point({ lat: x.lat, lon: x.lon }),\n        observationDateTime: oDT,\n        serviceStatus: status,\n        currentRangeMeters: x.current_range_meters, // not part of SDM\n    })\n}\n\nreturn {\n    payload : rows,\n    timestamp: msg.timestamp,\n    }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 320,
        "wires": [
            [
                "dc223cf83b756652",
                "bad3a5ee14b9abed",
                "27814809a4e3080e"
            ]
        ]
    },
    {
        "id": "dc223cf83b756652",
        "type": "debug",
        "z": "541e4b2a25f56a51",
        "g": "c7a0987960efee3f",
        "name": "payload[0]",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 300,
        "wires": []
    },
    {
        "id": "bad3a5ee14b9abed",
        "type": "debug",
        "z": "541e4b2a25f56a51",
        "g": "c7a0987960efee3f",
        "name": "# rows",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 530,
        "y": 360,
        "wires": []
    },
    {
        "id": "b889d8ea027ab160",
        "type": "debug",
        "z": "541e4b2a25f56a51",
        "g": "c7a0987960efee3f",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 550,
        "y": 160,
        "wires": []
    },
    {
        "id": "c5f1fcdf9d6f25fe",
        "type": "comment",
        "z": "541e4b2a25f56a51",
        "name": "Smart Data Model: Transportation.Vehicle",
        "info": "",
        "x": 200,
        "y": 80,
        "wires": []
    },
    {
        "id": "ef9f1d98236e03c3",
        "type": "comment",
        "z": "541e4b2a25f56a51",
        "name": "Zeus Leihroller Fahrzeuge aus Mobidata GBFS",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "32215c5b0fc9d5d5",
        "type": "function",
        "z": "541e4b2a25f56a51",
        "g": "efb71f06b1171c52",
        "name": "Define Statements (CREATE TABLE, ...)",
        "func": "msg.payload = []\nmsg.payload[0] = `\nCREATE TABLE mobidata_vehicles (\n    time timestamptz NOT NULL,\n    \"fleetVehicleId\" text NOT NULL,\n    \"vehicleType\" text NOT NULL,\n    location geometry NOT NULL,\n    \"observationDateTime\" timestamptz NOT NULL,\n    \"serviceStatus\" text NOT NULL,\n    \"currentRangeMeters\" double precision NOT NULL\n)\n`;\n\nmsg.payload[1] = `SELECT create_hypertable('mobidata_vehicles', 'time')`;\nmsg.payload[2] = `COMMENT ON TABLE mobidata_vehicles IS 'Column types follow the smart data model Transportation.Vehicle: https://github.com/smart-data-models/dataModel.Transportation/tree/master/Vehicle'`\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 880,
        "wires": [
            [
                "4f7cf3b9655f1ec5"
            ]
        ]
    },
    {
        "id": "4f7cf3b9655f1ec5",
        "type": "split",
        "z": "541e4b2a25f56a51",
        "g": "efb71f06b1171c52",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 880,
        "wires": [
            [
                "73150a2014f0be11"
            ]
        ]
    },
    {
        "id": "73150a2014f0be11",
        "type": "function",
        "z": "541e4b2a25f56a51",
        "g": "efb71f06b1171c52",
        "name": "Configure PostgREST request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/rpc/mgmt`;\nmsg.headers = {\n    'Content-Type': 'text/plain',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 740,
        "wires": [
            [
                "a4346a9f423f124f",
                "3d549e073bd598bb"
            ]
        ]
    },
    {
        "id": "a4346a9f423f124f",
        "type": "debug",
        "z": "541e4b2a25f56a51",
        "g": "efb71f06b1171c52",
        "name": "Exec Statement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 740,
        "wires": []
    },
    {
        "id": "5006b0df317b7aef",
        "type": "inject",
        "z": "541e4b2a25f56a51",
        "g": "efb71f06b1171c52",
        "name": "create",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 880,
        "wires": [
            [
                "32215c5b0fc9d5d5"
            ]
        ]
    },
    {
        "id": "7bcfd74f356855cd",
        "type": "function",
        "z": "541e4b2a25f56a51",
        "g": "5295eb8826702f2d",
        "name": "Define Statement (DROP TABLE)",
        "func": "msg.payload = `DROP TABLE IF EXISTS mobidata_vehicles`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 740,
        "wires": [
            [
                "73150a2014f0be11"
            ]
        ]
    },
    {
        "id": "98042903a531ade0",
        "type": "inject",
        "z": "541e4b2a25f56a51",
        "g": "5295eb8826702f2d",
        "name": "clean + recreate",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 760,
        "wires": [
            [
                "1ef0a435792ba31d",
                "7bcfd74f356855cd"
            ]
        ]
    },
    {
        "id": "1ef0a435792ba31d",
        "type": "delay",
        "z": "541e4b2a25f56a51",
        "g": "5295eb8826702f2d",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 800,
        "wires": [
            [
                "32215c5b0fc9d5d5"
            ]
        ]
    },
    {
        "id": "3d549e073bd598bb",
        "type": "delay",
        "z": "541e4b2a25f56a51",
        "g": "efb71f06b1171c52",
        "name": "",
        "pauseType": "rate",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 960,
        "y": 820,
        "wires": [
            [
                "c6ddd5234eff8889",
                "e9c3753ec70a3abe"
            ]
        ]
    },
    {
        "id": "e9c3753ec70a3abe",
        "type": "debug",
        "z": "541e4b2a25f56a51",
        "g": "efb71f06b1171c52",
        "name": "Exec Statement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 820,
        "wires": []
    },
    {
        "id": "c6ddd5234eff8889",
        "type": "http request",
        "z": "541e4b2a25f56a51",
        "g": "efb71f06b1171c52",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 880,
        "wires": [
            [
                "87e46a1170e6d16c"
            ]
        ]
    },
    {
        "id": "87e46a1170e6d16c",
        "type": "debug",
        "z": "541e4b2a25f56a51",
        "g": "efb71f06b1171c52",
        "name": "Exec Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1220,
        "y": 880,
        "wires": []
    },
    {
        "id": "27814809a4e3080e",
        "type": "function",
        "z": "541e4b2a25f56a51",
        "g": "7e108667b7b35e59",
        "name": "Configure PostgREST request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/mobidata_vehicles`;\nmsg.headers = {\n    'Content-Type': 'application/json',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 460,
        "wires": [
            [
                "e59b1fc3297be6d0",
                "68c3be2d139c8d13"
            ]
        ]
    },
    {
        "id": "68c3be2d139c8d13",
        "type": "debug",
        "z": "541e4b2a25f56a51",
        "g": "7e108667b7b35e59",
        "name": "Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 460,
        "wires": []
    },
    {
        "id": "e59b1fc3297be6d0",
        "type": "http request",
        "z": "541e4b2a25f56a51",
        "g": "7e108667b7b35e59",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 290,
        "y": 540,
        "wires": [
            [
                "46917c46b25aa384",
                "1070e397dc8bbe73"
            ]
        ]
    },
    {
        "id": "46917c46b25aa384",
        "type": "debug",
        "z": "541e4b2a25f56a51",
        "g": "7e108667b7b35e59",
        "name": "Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 540,
        "y": 520,
        "wires": []
    },
    {
        "id": "1070e397dc8bbe73",
        "type": "debug",
        "z": "541e4b2a25f56a51",
        "g": "7e108667b7b35e59",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 550,
        "y": 580,
        "wires": []
    },
    {
        "id": "54f3230f11be7ae4",
        "type": "inject",
        "z": "5043212b2379e71b",
        "g": "30013ccc1f412d72",
        "name": "inject",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "00 03 * * 2",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "626c24a59ef1b75a",
                "4c7cf439031aa802"
            ]
        ]
    },
    {
        "id": "626c24a59ef1b75a",
        "type": "debug",
        "z": "5043212b2379e71b",
        "g": "30013ccc1f412d72",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 550,
        "y": 160,
        "wires": []
    },
    {
        "id": "71152ddb855af6c1",
        "type": "http request",
        "z": "5043212b2379e71b",
        "g": "76b6d695d28b4d5c",
        "name": "GET locations",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 180,
        "y": 340,
        "wires": [
            [
                "413de703924682f7",
                "6038b168d6d426c0",
                "50730f3b1fadc90e"
            ]
        ]
    },
    {
        "id": "413de703924682f7",
        "type": "debug",
        "z": "5043212b2379e71b",
        "g": "76b6d695d28b4d5c",
        "name": "OCDB response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 520,
        "y": 400,
        "wires": []
    },
    {
        "id": "04873f6a5ca52ad7",
        "type": "function",
        "z": "5043212b2379e71b",
        "g": "30013ccc1f412d72",
        "name": "build payload",
        "func": "return {\n    payload: {\n        time: new Date(msg.timestamp).toISOString(),\n        url: msg.first_url,\n        data: msg.payload,\n    },\n    timestamp: msg.timestamp,\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 580,
        "wires": [
            [
                "44131bee2c1ee3e7",
                "dc1da52314af2f43"
            ]
        ]
    },
    {
        "id": "44131bee2c1ee3e7",
        "type": "debug",
        "z": "5043212b2379e71b",
        "g": "30013ccc1f412d72",
        "name": "Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 580,
        "wires": []
    },
    {
        "id": "4c7cf439031aa802",
        "type": "function",
        "z": "5043212b2379e71b",
        "g": "76b6d695d28b4d5c",
        "name": "set msg.base_url and msg.path",
        "func": "msg.base_url = 'https://api.mobidata-bw.de/ocpdb'\nmsg.path = '/api/public/v1/locations'\nmsg.path += '?lon=9.14&lat=47.7&radius=7920'\n\nmsg.first_url = msg.base_url + msg.path\n\n// test pagination with\n// msg.path += '?lon=9.14&lat=47.7&radius=7920&limit=10'\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 240,
        "wires": [
            [
                "d01dcdec5d23cc0d"
            ]
        ]
    },
    {
        "id": "6038b168d6d426c0",
        "type": "function",
        "z": "5043212b2379e71b",
        "g": "76b6d695d28b4d5c",
        "name": "pagination: continue",
        "func": "if (msg.payload.hasOwnProperty('next_path')) {\n    msg.path = msg.payload['next_path']\n    return msg\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 340,
        "wires": [
            [
                "d01dcdec5d23cc0d"
            ]
        ]
    },
    {
        "id": "d01dcdec5d23cc0d",
        "type": "function",
        "z": "5043212b2379e71b",
        "g": "76b6d695d28b4d5c",
        "name": "set msg.url",
        "func": "msg.url = msg.base_url + msg.path\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 240,
        "wires": [
            [
                "71152ddb855af6c1"
            ]
        ]
    },
    {
        "id": "c2239362dde3a5d6",
        "type": "join",
        "z": "5043212b2379e71b",
        "g": "76b6d695d28b4d5c",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 170,
        "y": 460,
        "wires": [
            [
                "67cb23dbb64c6859"
            ]
        ]
    },
    {
        "id": "50730f3b1fadc90e",
        "type": "function",
        "z": "5043212b2379e71b",
        "g": "76b6d695d28b4d5c",
        "name": "pagination: prep join",
        "func": "if (!msg.payload.hasOwnProperty('next_path')) {\n    msg.complete = true;\n}\nmsg.payload = msg.payload.items\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 400,
        "wires": [
            [
                "c2239362dde3a5d6"
            ]
        ]
    },
    {
        "id": "67cb23dbb64c6859",
        "type": "function",
        "z": "5043212b2379e71b",
        "g": "76b6d695d28b4d5c",
        "name": "flatten",
        "func": "msg.payload = msg.payload.flat()\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 460,
        "wires": [
            [
                "04873f6a5ca52ad7",
                "d6705b58c8208b70",
                "31a49f07e5edc38f"
            ]
        ]
    },
    {
        "id": "a091c527f64995f9",
        "type": "function",
        "z": "5043212b2379e71b",
        "g": "f0ecc985a2fab29a",
        "name": "Define Statements (CREATE TABLE, ...)",
        "func": "msg.payload = []\nmsg.payload[0] = `\nCREATE TABLE mobidata_ocpdb (\n    time timestamptz NOT NULL,\n    url text NOT NULL,\n    data jsonb NOT NULL\n)\n`;\n\nmsg.payload[1] = `SELECT create_hypertable('mobidata_ocpdb', 'time')`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1100,
        "wires": [
            [
                "395e63152d11bad7"
            ]
        ]
    },
    {
        "id": "395e63152d11bad7",
        "type": "split",
        "z": "5043212b2379e71b",
        "g": "f0ecc985a2fab29a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 1100,
        "wires": [
            [
                "65808d41ca65e685"
            ]
        ]
    },
    {
        "id": "65808d41ca65e685",
        "type": "function",
        "z": "5043212b2379e71b",
        "g": "f0ecc985a2fab29a",
        "name": "Configure PostgREST request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/rpc/mgmt`;\nmsg.headers = {\n    'Content-Type': 'text/plain',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 960,
        "wires": [
            [
                "3fb47b30590483e7",
                "26bbca78f4f0238a"
            ]
        ]
    },
    {
        "id": "3fb47b30590483e7",
        "type": "debug",
        "z": "5043212b2379e71b",
        "g": "f0ecc985a2fab29a",
        "name": "Exec Statement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 960,
        "wires": []
    },
    {
        "id": "c0c6f03ffd9df0c0",
        "type": "inject",
        "z": "5043212b2379e71b",
        "g": "f0ecc985a2fab29a",
        "name": "create",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 1100,
        "wires": [
            [
                "a091c527f64995f9"
            ]
        ]
    },
    {
        "id": "97e0d039c27ccc7c",
        "type": "function",
        "z": "5043212b2379e71b",
        "g": "a6d754d0b4cb8a69",
        "name": "Define Statement (DROP TABLE)",
        "func": "msg.payload = `DROP TABLE IF EXISTS mobidata_ocpdb`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 960,
        "wires": [
            [
                "65808d41ca65e685"
            ]
        ]
    },
    {
        "id": "35ad38dc7b697312",
        "type": "inject",
        "z": "5043212b2379e71b",
        "g": "a6d754d0b4cb8a69",
        "name": "clean + recreate",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 200,
        "y": 980,
        "wires": [
            [
                "f449dc07a6445fd1",
                "97e0d039c27ccc7c"
            ]
        ]
    },
    {
        "id": "f449dc07a6445fd1",
        "type": "delay",
        "z": "5043212b2379e71b",
        "g": "a6d754d0b4cb8a69",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 1020,
        "wires": [
            [
                "a091c527f64995f9"
            ]
        ]
    },
    {
        "id": "31a49f07e5edc38f",
        "type": "debug",
        "z": "5043212b2379e71b",
        "g": "76b6d695d28b4d5c",
        "name": "first item",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 460,
        "wires": []
    },
    {
        "id": "d6705b58c8208b70",
        "type": "debug",
        "z": "5043212b2379e71b",
        "g": "76b6d695d28b4d5c",
        "name": "# items",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 500,
        "y": 500,
        "wires": []
    },
    {
        "id": "dc1da52314af2f43",
        "type": "function",
        "z": "5043212b2379e71b",
        "g": "9021453973b1e990",
        "name": "Configure PostgREST request",
        "func": "const postgrest = env.get('POSTGREST_API_URL');\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/mobidata_ocpdb`;\nmsg.headers = {\n    'Content-Type': 'application/json',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 660,
        "wires": [
            [
                "6f8987d7bb88570e",
                "fa7bb89cd6513dd8"
            ]
        ]
    },
    {
        "id": "fa7bb89cd6513dd8",
        "type": "debug",
        "z": "5043212b2379e71b",
        "g": "9021453973b1e990",
        "name": "Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 660,
        "wires": []
    },
    {
        "id": "6f8987d7bb88570e",
        "type": "http request",
        "z": "5043212b2379e71b",
        "g": "9021453973b1e990",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 230,
        "y": 740,
        "wires": [
            [
                "74cbe6ae8e9d28ab",
                "8b6dc768a5a2584a"
            ]
        ]
    },
    {
        "id": "74cbe6ae8e9d28ab",
        "type": "debug",
        "z": "5043212b2379e71b",
        "g": "9021453973b1e990",
        "name": "Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 480,
        "y": 720,
        "wires": []
    },
    {
        "id": "8b6dc768a5a2584a",
        "type": "debug",
        "z": "5043212b2379e71b",
        "g": "9021453973b1e990",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 490,
        "y": 780,
        "wires": []
    },
    {
        "id": "404d85508fcd936e",
        "type": "debug",
        "z": "5043212b2379e71b",
        "g": "f0ecc985a2fab29a",
        "name": "Exec Statement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 1040,
        "wires": []
    },
    {
        "id": "61ae8ad7328d8d1b",
        "type": "http request",
        "z": "5043212b2379e71b",
        "g": "f0ecc985a2fab29a",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 1100,
        "wires": [
            [
                "abf8c58f802b3876"
            ]
        ]
    },
    {
        "id": "abf8c58f802b3876",
        "type": "debug",
        "z": "5043212b2379e71b",
        "g": "f0ecc985a2fab29a",
        "name": "Exec Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1220,
        "y": 1100,
        "wires": []
    },
    {
        "id": "26bbca78f4f0238a",
        "type": "delay",
        "z": "5043212b2379e71b",
        "g": "f0ecc985a2fab29a",
        "name": "",
        "pauseType": "rate",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 960,
        "y": 1040,
        "wires": [
            [
                "61ae8ad7328d8d1b",
                "404d85508fcd936e"
            ]
        ]
    },
    {
        "id": "896b03c6b517970b",
        "type": "comment",
        "z": "5043212b2379e71b",
        "name": "Raw data logging",
        "info": "",
        "x": 120,
        "y": 80,
        "wires": []
    },
    {
        "id": "f6b030b7e03dc609",
        "type": "comment",
        "z": "5043212b2379e71b",
        "name": "Elektroauto Ladestationen aus OCPDB",
        "info": "",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "89c222043f2beeb7",
        "type": "function",
        "z": "d4f0e7402fe799f8",
        "g": "6fdf9b96deeaa488",
        "name": "Define Statements (CREATE TABLE, ...)",
        "func": "msg.payload = []\nmsg.payload[0] = `\nCREATE TABLE mobidata_evchargingstations (\n    time timestamptz NOT NULL,\n    id text NOT NULL,\n    address jsonb NOT NULL,\n    \"dataProvider\" text NOT NULL,\n    location geometry NOT NULL,\n    operator text NOT NULL,\n    \"observationDateTime\" timestamptz NOT NULL,\n    \"socketNumber\" int NOT NULL,\n    \"socketType\" jsonb NOT NULL,\n    \"powerConsumption\" double precision NOT NULL\n)\n`;\n\nmsg.payload[1] = `SELECT create_hypertable('mobidata_evchargingstations', 'time')`;\nmsg.payload[2] = `COMMENT ON TABLE mobidata_evchargingstations IS 'Column types follow the smart data model Transportation.EVChargingStation: https://github.com/smart-data-models/dataModel.Transportation/tree/master/EVChargingStation'`\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1080,
        "wires": [
            [
                "f9fe04d82f31e645"
            ]
        ]
    },
    {
        "id": "f9fe04d82f31e645",
        "type": "split",
        "z": "d4f0e7402fe799f8",
        "g": "6fdf9b96deeaa488",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 1080,
        "wires": [
            [
                "c5b2abce3d597894"
            ]
        ]
    },
    {
        "id": "c5b2abce3d597894",
        "type": "function",
        "z": "d4f0e7402fe799f8",
        "g": "6fdf9b96deeaa488",
        "name": "Configure PostgREST request",
        "func": "const postgrest = 'postgrest-service.prd-data-management-stack.svc.cluster.local:3000'\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/rpc/mgmt`;\nmsg.headers = {\n    'Content-Type': 'text/plain',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 940,
        "wires": [
            [
                "04b0c086457585ae"
            ]
        ]
    },
    {
        "id": "b159a68fe0144d09",
        "type": "debug",
        "z": "d4f0e7402fe799f8",
        "g": "6fdf9b96deeaa488",
        "name": "Exec Statement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 1020,
        "wires": []
    },
    {
        "id": "899a86ccce65c327",
        "type": "inject",
        "z": "d4f0e7402fe799f8",
        "g": "6fdf9b96deeaa488",
        "name": "create",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 1080,
        "wires": [
            [
                "89c222043f2beeb7"
            ]
        ]
    },
    {
        "id": "af6dd385ea8a5a80",
        "type": "http request",
        "z": "d4f0e7402fe799f8",
        "g": "6fdf9b96deeaa488",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 950,
        "y": 1080,
        "wires": [
            [
                "a30ba77131584ae7"
            ]
        ]
    },
    {
        "id": "a30ba77131584ae7",
        "type": "debug",
        "z": "d4f0e7402fe799f8",
        "g": "6fdf9b96deeaa488",
        "name": "Exec Response",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 1220,
        "y": 1080,
        "wires": []
    },
    {
        "id": "5530dcf69c72f409",
        "type": "function",
        "z": "d4f0e7402fe799f8",
        "g": "6544352628596478",
        "name": "Define Statement (DROP TABLE)",
        "func": "msg.payload = `DROP TABLE IF EXISTS mobidata_evchargingstations`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 940,
        "wires": [
            [
                "c5b2abce3d597894"
            ]
        ]
    },
    {
        "id": "35a60496d4fa38a8",
        "type": "inject",
        "z": "d4f0e7402fe799f8",
        "g": "6544352628596478",
        "name": "clean + recreate",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 180,
        "y": 960,
        "wires": [
            [
                "18775d72311df69e",
                "5530dcf69c72f409"
            ]
        ]
    },
    {
        "id": "18775d72311df69e",
        "type": "delay",
        "z": "d4f0e7402fe799f8",
        "g": "6544352628596478",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 1000,
        "wires": [
            [
                "89c222043f2beeb7"
            ]
        ]
    },
    {
        "id": "7a1229b9f11f8d4b",
        "type": "inject",
        "z": "d4f0e7402fe799f8",
        "g": "2677aefc9d51833a",
        "name": "inject",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "00 03 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "5b0be50bf1cf0fa0",
                "fb394da75935ee24"
            ]
        ]
    },
    {
        "id": "5b0be50bf1cf0fa0",
        "type": "debug",
        "z": "d4f0e7402fe799f8",
        "g": "2677aefc9d51833a",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "8479727918ef6376",
        "type": "http request",
        "z": "d4f0e7402fe799f8",
        "g": "77340e0899cd190b",
        "name": "GET locations",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 160,
        "y": 340,
        "wires": [
            [
                "9a75f0cc0e2a8e7e",
                "64c4f1734b9c8a98",
                "e5dfd2ec225221c1"
            ]
        ]
    },
    {
        "id": "9a75f0cc0e2a8e7e",
        "type": "debug",
        "z": "d4f0e7402fe799f8",
        "g": "77340e0899cd190b",
        "name": "OCDB response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 500,
        "y": 400,
        "wires": []
    },
    {
        "id": "fb394da75935ee24",
        "type": "function",
        "z": "d4f0e7402fe799f8",
        "g": "77340e0899cd190b",
        "name": "set msg.base_url and msg.path",
        "func": "msg.base_url = 'https://api.mobidata-bw.de/ocpdb'\nmsg.path = '/api/public/v1/locations'\nmsg.path += '?lon=9.14&lat=47.7&radius=7920'\n\nmsg.first_url = msg.base_url + msg.path\n\n// test pagination with\n// msg.path += '?lon=9.14&lat=47.7&radius=7920&limit=10'\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 240,
        "wires": [
            [
                "d7852f33a08e8887"
            ]
        ]
    },
    {
        "id": "64c4f1734b9c8a98",
        "type": "function",
        "z": "d4f0e7402fe799f8",
        "g": "77340e0899cd190b",
        "name": "pagination: continue",
        "func": "if (msg.payload.hasOwnProperty('next_path')) {\n    msg.path = msg.payload['next_path']\n    return msg\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 340,
        "wires": [
            [
                "d7852f33a08e8887"
            ]
        ]
    },
    {
        "id": "d7852f33a08e8887",
        "type": "function",
        "z": "d4f0e7402fe799f8",
        "g": "77340e0899cd190b",
        "name": "set msg.url",
        "func": "msg.url = msg.base_url + msg.path\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 240,
        "wires": [
            [
                "8479727918ef6376"
            ]
        ]
    },
    {
        "id": "a75a5e6cb9a2ec88",
        "type": "join",
        "z": "d4f0e7402fe799f8",
        "g": "77340e0899cd190b",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 150,
        "y": 460,
        "wires": [
            [
                "fe0b54a98c6bf6f2"
            ]
        ]
    },
    {
        "id": "e5dfd2ec225221c1",
        "type": "function",
        "z": "d4f0e7402fe799f8",
        "g": "77340e0899cd190b",
        "name": "pagination: prep join",
        "func": "if (!msg.payload.hasOwnProperty('next_path')) {\n    msg.complete = true;\n}\nmsg.payload = msg.payload.items\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 400,
        "wires": [
            [
                "a75a5e6cb9a2ec88"
            ]
        ]
    },
    {
        "id": "fe0b54a98c6bf6f2",
        "type": "function",
        "z": "d4f0e7402fe799f8",
        "g": "77340e0899cd190b",
        "name": "flatten",
        "func": "msg.payload = msg.payload.flat()\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 460,
        "wires": [
            [
                "d21418b37884a05b",
                "c5171d51c1cf97ec",
                "d25d17ad11926b49"
            ]
        ]
    },
    {
        "id": "c5171d51c1cf97ec",
        "type": "debug",
        "z": "d4f0e7402fe799f8",
        "g": "77340e0899cd190b",
        "name": "first item",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 460,
        "wires": []
    },
    {
        "id": "d21418b37884a05b",
        "type": "debug",
        "z": "d4f0e7402fe799f8",
        "g": "77340e0899cd190b",
        "name": "# items",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'n: ' & $count(msg.payload)",
        "statusType": "jsonata",
        "x": 480,
        "y": 500,
        "wires": []
    },
    {
        "id": "d25d17ad11926b49",
        "type": "function",
        "z": "d4f0e7402fe799f8",
        "g": "2677aefc9d51833a",
        "name": "build payload",
        "func": "function point({lon, lat}) {\n    return `SRID=4326;POINT(${lon} ${lat})`\n}\n\nconst observations = msg.payload.map(x => (\n    x.evses.map( y => ({\n        time: new Date(msg.timestamp).toISOString(),\n        id: y.uid,\n        address: {\n            addressCountry: x.country,\n            addressRegion: x.state || null,\n            addressLocality: x.city,\n            streetAddress: x.address,\n            postalCode: x.postal_code,\n        },\n        dataProvider: `mobidata, ${x.source}`,\n        location: point({\n            lat: Number(x.coordinates.lat),\n            lon: Number(x.coordinates.lon),\n            }),\n        operator: x.operator.name,\n        observationDateTime: y.last_updated,\n        socketNumber: y.connectors.length,\n        socketType: y.connectors.map(x => x.standard),\n        powerConsumption: Math.max(...y.connectors.map(x => x.max_electric_power)),\n    }))\n)).flat();\n\nreturn {\n    payload : observations,\n    timestamp: msg.timestamp,\n    }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 580,
        "wires": [
            [
                "76514695a5980861",
                "e29eb25a802a9814"
            ]
        ]
    },
    {
        "id": "76514695a5980861",
        "type": "debug",
        "z": "d4f0e7402fe799f8",
        "g": "2677aefc9d51833a",
        "name": "Payload[0]",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 580,
        "wires": []
    },
    {
        "id": "e29eb25a802a9814",
        "type": "function",
        "z": "d4f0e7402fe799f8",
        "g": "d8327e5b86c46b16",
        "name": "Configure PostgREST request",
        "func": "const postgrest = 'postgrest-service.prd-data-management-stack.svc.cluster.local:3000'\n\nmsg.method = 'POST';\nmsg.url = `${postgrest}/mobidata_evchargingstations`;\nmsg.headers = {\n    'Content-Type': 'application/json',\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 660,
        "wires": [
            [
                "2e8fa978dd2ec7e4",
                "8f0d6a72787a408f"
            ]
        ]
    },
    {
        "id": "8f0d6a72787a408f",
        "type": "debug",
        "z": "d4f0e7402fe799f8",
        "g": "d8327e5b86c46b16",
        "name": "Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 660,
        "wires": []
    },
    {
        "id": "2e8fa978dd2ec7e4",
        "type": "http request",
        "z": "d4f0e7402fe799f8",
        "g": "d8327e5b86c46b16",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 210,
        "y": 740,
        "wires": [
            [
                "25c57deef636d97d",
                "be98aa5e1e4e3b03"
            ]
        ]
    },
    {
        "id": "25c57deef636d97d",
        "type": "debug",
        "z": "d4f0e7402fe799f8",
        "g": "d8327e5b86c46b16",
        "name": "Response",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "'status: ' & msg.statusCode",
        "statusType": "jsonata",
        "x": 460,
        "y": 720,
        "wires": []
    },
    {
        "id": "be98aa5e1e4e3b03",
        "type": "debug",
        "z": "d4f0e7402fe799f8",
        "g": "d8327e5b86c46b16",
        "name": "timestamp",
        "active": false,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "$fromMillis(msg.timestamp)",
        "statusType": "jsonata",
        "x": 470,
        "y": 780,
        "wires": []
    },
    {
        "id": "04b0c086457585ae",
        "type": "delay",
        "z": "d4f0e7402fe799f8",
        "g": "6fdf9b96deeaa488",
        "name": "",
        "pauseType": "rate",
        "timeout": "200",
        "timeoutUnits": "milliseconds",
        "rate": "2",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 960,
        "y": 1020,
        "wires": [
            [
                "af6dd385ea8a5a80",
                "b159a68fe0144d09"
            ]
        ]
    },
    {
        "id": "057174671a16e98d",
        "type": "comment",
        "z": "d4f0e7402fe799f8",
        "name": "Smart Data Model: Transportation.EVChargingStation",
        "info": "",
        "x": 220,
        "y": 80,
        "wires": []
    },
    {
        "id": "735b515f59fe233f",
        "type": "comment",
        "z": "d4f0e7402fe799f8",
        "name": "Elektroauto Ladestationen aus OCPDB",
        "info": "",
        "x": 170,
        "y": 40,
        "wires": []
    }
]